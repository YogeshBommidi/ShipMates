
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Loads
 * 
 */
export type Loads = $Result.DefaultSelection<Prisma.$LoadsPayload>
/**
 * Model Trucks
 * 
 */
export type Trucks = $Result.DefaultSelection<Prisma.$TrucksPayload>
/**
 * Model TruckPrice
 * 
 */
export type TruckPrice = $Result.DefaultSelection<Prisma.$TruckPricePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.loads`: Exposes CRUD operations for the **Loads** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Loads
    * const loads = await prisma.loads.findMany()
    * ```
    */
  get loads(): Prisma.LoadsDelegate<ExtArgs>;

  /**
   * `prisma.trucks`: Exposes CRUD operations for the **Trucks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trucks
    * const trucks = await prisma.trucks.findMany()
    * ```
    */
  get trucks(): Prisma.TrucksDelegate<ExtArgs>;

  /**
   * `prisma.truckPrice`: Exposes CRUD operations for the **TruckPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TruckPrices
    * const truckPrices = await prisma.truckPrice.findMany()
    * ```
    */
  get truckPrice(): Prisma.TruckPriceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Loads: 'Loads',
    Trucks: 'Trucks',
    TruckPrice: 'TruckPrice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'loads' | 'trucks' | 'truckPrice'
      txIsolationLevel: never
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Loads: {
        payload: Prisma.$LoadsPayload<ExtArgs>
        fields: Prisma.LoadsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoadsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoadsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload>
          }
          findFirst: {
            args: Prisma.LoadsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoadsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload>
          }
          findMany: {
            args: Prisma.LoadsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload>[]
          }
          create: {
            args: Prisma.LoadsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload>
          }
          createMany: {
            args: Prisma.LoadsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LoadsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload>
          }
          update: {
            args: Prisma.LoadsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload>
          }
          deleteMany: {
            args: Prisma.LoadsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LoadsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LoadsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadsPayload>
          }
          aggregate: {
            args: Prisma.LoadsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLoads>
          }
          groupBy: {
            args: Prisma.LoadsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LoadsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LoadsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.LoadsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.LoadsCountArgs<ExtArgs>,
            result: $Utils.Optional<LoadsCountAggregateOutputType> | number
          }
        }
      }
      Trucks: {
        payload: Prisma.$TrucksPayload<ExtArgs>
        fields: Prisma.TrucksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrucksFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrucksFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload>
          }
          findFirst: {
            args: Prisma.TrucksFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrucksFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload>
          }
          findMany: {
            args: Prisma.TrucksFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload>[]
          }
          create: {
            args: Prisma.TrucksCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload>
          }
          createMany: {
            args: Prisma.TrucksCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TrucksDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload>
          }
          update: {
            args: Prisma.TrucksUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload>
          }
          deleteMany: {
            args: Prisma.TrucksDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TrucksUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TrucksUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrucksPayload>
          }
          aggregate: {
            args: Prisma.TrucksAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTrucks>
          }
          groupBy: {
            args: Prisma.TrucksGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TrucksGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TrucksFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.TrucksAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.TrucksCountArgs<ExtArgs>,
            result: $Utils.Optional<TrucksCountAggregateOutputType> | number
          }
        }
      }
      TruckPrice: {
        payload: Prisma.$TruckPricePayload<ExtArgs>
        fields: Prisma.TruckPriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TruckPriceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TruckPriceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          findFirst: {
            args: Prisma.TruckPriceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TruckPriceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          findMany: {
            args: Prisma.TruckPriceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>[]
          }
          create: {
            args: Prisma.TruckPriceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          createMany: {
            args: Prisma.TruckPriceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TruckPriceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          update: {
            args: Prisma.TruckPriceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          deleteMany: {
            args: Prisma.TruckPriceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TruckPriceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TruckPriceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          aggregate: {
            args: Prisma.TruckPriceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTruckPrice>
          }
          groupBy: {
            args: Prisma.TruckPriceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TruckPriceGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TruckPriceFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.TruckPriceAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.TruckPriceCountArgs<ExtArgs>,
            result: $Utils.Optional<TruckPriceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    ownedLoads: number
    ownedTrucks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedLoads?: boolean | UserCountOutputTypeCountOwnedLoadsArgs
    ownedTrucks?: boolean | UserCountOutputTypeCountOwnedTrucksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedTrucksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrucksWhereInput
  }


  /**
   * Count Type LoadsCountOutputType
   */

  export type LoadsCountOutputType = {
    truckPrices: number
  }

  export type LoadsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    truckPrices?: boolean | LoadsCountOutputTypeCountTruckPricesArgs
  }

  // Custom InputTypes
  /**
   * LoadsCountOutputType without action
   */
  export type LoadsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadsCountOutputType
     */
    select?: LoadsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LoadsCountOutputType without action
   */
  export type LoadsCountOutputTypeCountTruckPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckPriceWhereInput
  }


  /**
   * Count Type TrucksCountOutputType
   */

  export type TrucksCountOutputType = {
    TruckPrice: number
  }

  export type TrucksCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TruckPrice?: boolean | TrucksCountOutputTypeCountTruckPriceArgs
  }

  // Custom InputTypes
  /**
   * TrucksCountOutputType without action
   */
  export type TrucksCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrucksCountOutputType
     */
    select?: TrucksCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrucksCountOutputType without action
   */
  export type TrucksCountOutputTypeCountTruckPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckPriceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    image?: boolean
    ownedLoads?: boolean | User$ownedLoadsArgs<ExtArgs>
    ownedTrucks?: boolean | User$ownedTrucksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    image?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedLoads?: boolean | User$ownedLoadsArgs<ExtArgs>
    ownedTrucks?: boolean | User$ownedTrucksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      ownedLoads: Prisma.$LoadsPayload<ExtArgs>[]
      ownedTrucks: Prisma.$TrucksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ownedLoads<T extends User$ownedLoadsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedLoadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'findMany'> | Null>;

    ownedTrucks<T extends User$ownedTrucksArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedTrucksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.ownedLoads
   */
  export type User$ownedLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    where?: LoadsWhereInput
    orderBy?: LoadsOrderByWithRelationInput | LoadsOrderByWithRelationInput[]
    cursor?: LoadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoadsScalarFieldEnum | LoadsScalarFieldEnum[]
  }

  /**
   * User.ownedTrucks
   */
  export type User$ownedTrucksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    where?: TrucksWhereInput
    orderBy?: TrucksOrderByWithRelationInput | TrucksOrderByWithRelationInput[]
    cursor?: TrucksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrucksScalarFieldEnum | TrucksScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Loads
   */

  export type AggregateLoads = {
    _count: LoadsCountAggregateOutputType | null
    _avg: LoadsAvgAggregateOutputType | null
    _sum: LoadsSumAggregateOutputType | null
    _min: LoadsMinAggregateOutputType | null
    _max: LoadsMaxAggregateOutputType | null
  }

  export type LoadsAvgAggregateOutputType = {
    price: number | null
  }

  export type LoadsSumAggregateOutputType = {
    price: number | null
  }

  export type LoadsMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    price: number | null
    fromAddress: string | null
    toAddress: string | null
    image: string | null
    userEmail: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LoadsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    price: number | null
    fromAddress: string | null
    toAddress: string | null
    image: string | null
    userEmail: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LoadsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    price: number
    fromAddress: number
    toAddress: number
    image: number
    userEmail: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LoadsAvgAggregateInputType = {
    price?: true
  }

  export type LoadsSumAggregateInputType = {
    price?: true
  }

  export type LoadsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    fromAddress?: true
    toAddress?: true
    image?: true
    userEmail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LoadsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    fromAddress?: true
    toAddress?: true
    image?: true
    userEmail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LoadsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    fromAddress?: true
    toAddress?: true
    image?: true
    userEmail?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LoadsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loads to aggregate.
     */
    where?: LoadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadsOrderByWithRelationInput | LoadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Loads
    **/
    _count?: true | LoadsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoadsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoadsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoadsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoadsMaxAggregateInputType
  }

  export type GetLoadsAggregateType<T extends LoadsAggregateArgs> = {
        [P in keyof T & keyof AggregateLoads]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoads[P]>
      : GetScalarType<T[P], AggregateLoads[P]>
  }




  export type LoadsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadsWhereInput
    orderBy?: LoadsOrderByWithAggregationInput | LoadsOrderByWithAggregationInput[]
    by: LoadsScalarFieldEnum[] | LoadsScalarFieldEnum
    having?: LoadsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoadsCountAggregateInputType | true
    _avg?: LoadsAvgAggregateInputType
    _sum?: LoadsSumAggregateInputType
    _min?: LoadsMinAggregateInputType
    _max?: LoadsMaxAggregateInputType
  }

  export type LoadsGroupByOutputType = {
    id: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    createdAt: Date
    updatedAt: Date
    _count: LoadsCountAggregateOutputType | null
    _avg: LoadsAvgAggregateOutputType | null
    _sum: LoadsSumAggregateOutputType | null
    _min: LoadsMinAggregateOutputType | null
    _max: LoadsMaxAggregateOutputType | null
  }

  type GetLoadsGroupByPayload<T extends LoadsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoadsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoadsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoadsGroupByOutputType[P]>
            : GetScalarType<T[P], LoadsGroupByOutputType[P]>
        }
      >
    >


  export type LoadsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    image?: boolean
    userEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    truckPrices?: boolean | Loads$truckPricesArgs<ExtArgs>
    _count?: boolean | LoadsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loads"]>

  export type LoadsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    image?: boolean
    userEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type LoadsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    truckPrices?: boolean | Loads$truckPricesArgs<ExtArgs>
    _count?: boolean | LoadsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LoadsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Loads"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      truckPrices: Prisma.$TruckPricePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      price: number
      fromAddress: string
      toAddress: string
      image: string
      userEmail: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["loads"]>
    composites: {}
  }


  type LoadsGetPayload<S extends boolean | null | undefined | LoadsDefaultArgs> = $Result.GetResult<Prisma.$LoadsPayload, S>

  type LoadsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoadsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LoadsCountAggregateInputType | true
    }

  export interface LoadsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Loads'], meta: { name: 'Loads' } }
    /**
     * Find zero or one Loads that matches the filter.
     * @param {LoadsFindUniqueArgs} args - Arguments to find a Loads
     * @example
     * // Get one Loads
     * const loads = await prisma.loads.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoadsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LoadsFindUniqueArgs<ExtArgs>>
    ): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Loads that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LoadsFindUniqueOrThrowArgs} args - Arguments to find a Loads
     * @example
     * // Get one Loads
     * const loads = await prisma.loads.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoadsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Loads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadsFindFirstArgs} args - Arguments to find a Loads
     * @example
     * // Get one Loads
     * const loads = await prisma.loads.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoadsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadsFindFirstArgs<ExtArgs>>
    ): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Loads that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadsFindFirstOrThrowArgs} args - Arguments to find a Loads
     * @example
     * // Get one Loads
     * const loads = await prisma.loads.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoadsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Loads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Loads
     * const loads = await prisma.loads.findMany()
     * 
     * // Get first 10 Loads
     * const loads = await prisma.loads.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loadsWithIdOnly = await prisma.loads.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoadsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Loads.
     * @param {LoadsCreateArgs} args - Arguments to create a Loads.
     * @example
     * // Create one Loads
     * const Loads = await prisma.loads.create({
     *   data: {
     *     // ... data to create a Loads
     *   }
     * })
     * 
    **/
    create<T extends LoadsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LoadsCreateArgs<ExtArgs>>
    ): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Loads.
     * @param {LoadsCreateManyArgs} args - Arguments to create many Loads.
     * @example
     * // Create many Loads
     * const loads = await prisma.loads.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends LoadsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Loads.
     * @param {LoadsDeleteArgs} args - Arguments to delete one Loads.
     * @example
     * // Delete one Loads
     * const Loads = await prisma.loads.delete({
     *   where: {
     *     // ... filter to delete one Loads
     *   }
     * })
     * 
    **/
    delete<T extends LoadsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LoadsDeleteArgs<ExtArgs>>
    ): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Loads.
     * @param {LoadsUpdateArgs} args - Arguments to update one Loads.
     * @example
     * // Update one Loads
     * const loads = await prisma.loads.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoadsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LoadsUpdateArgs<ExtArgs>>
    ): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Loads.
     * @param {LoadsDeleteManyArgs} args - Arguments to filter Loads to delete.
     * @example
     * // Delete a few Loads
     * const { count } = await prisma.loads.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoadsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Loads
     * const loads = await prisma.loads.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoadsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LoadsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Loads.
     * @param {LoadsUpsertArgs} args - Arguments to update or create a Loads.
     * @example
     * // Update or create a Loads
     * const loads = await prisma.loads.upsert({
     *   create: {
     *     // ... data to create a Loads
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Loads we want to update
     *   }
     * })
    **/
    upsert<T extends LoadsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LoadsUpsertArgs<ExtArgs>>
    ): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Loads that matches the filter.
     * @param {LoadsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const loads = await prisma.loads.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LoadsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Loads.
     * @param {LoadsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const loads = await prisma.loads.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LoadsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Loads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadsCountArgs} args - Arguments to filter Loads to count.
     * @example
     * // Count the number of Loads
     * const count = await prisma.loads.count({
     *   where: {
     *     // ... the filter for the Loads we want to count
     *   }
     * })
    **/
    count<T extends LoadsCountArgs>(
      args?: Subset<T, LoadsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoadsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Loads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoadsAggregateArgs>(args: Subset<T, LoadsAggregateArgs>): Prisma.PrismaPromise<GetLoadsAggregateType<T>>

    /**
     * Group by Loads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoadsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoadsGroupByArgs['orderBy'] }
        : { orderBy?: LoadsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoadsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoadsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Loads model
   */
  readonly fields: LoadsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Loads.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoadsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    truckPrices<T extends Loads$truckPricesArgs<ExtArgs> = {}>(args?: Subset<T, Loads$truckPricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Loads model
   */ 
  interface LoadsFieldRefs {
    readonly id: FieldRef<"Loads", 'String'>
    readonly title: FieldRef<"Loads", 'String'>
    readonly description: FieldRef<"Loads", 'String'>
    readonly price: FieldRef<"Loads", 'Int'>
    readonly fromAddress: FieldRef<"Loads", 'String'>
    readonly toAddress: FieldRef<"Loads", 'String'>
    readonly image: FieldRef<"Loads", 'String'>
    readonly userEmail: FieldRef<"Loads", 'String'>
    readonly createdAt: FieldRef<"Loads", 'DateTime'>
    readonly updatedAt: FieldRef<"Loads", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Loads findUnique
   */
  export type LoadsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * Filter, which Loads to fetch.
     */
    where: LoadsWhereUniqueInput
  }

  /**
   * Loads findUniqueOrThrow
   */
  export type LoadsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * Filter, which Loads to fetch.
     */
    where: LoadsWhereUniqueInput
  }

  /**
   * Loads findFirst
   */
  export type LoadsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * Filter, which Loads to fetch.
     */
    where?: LoadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadsOrderByWithRelationInput | LoadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loads.
     */
    cursor?: LoadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loads.
     */
    distinct?: LoadsScalarFieldEnum | LoadsScalarFieldEnum[]
  }

  /**
   * Loads findFirstOrThrow
   */
  export type LoadsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * Filter, which Loads to fetch.
     */
    where?: LoadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadsOrderByWithRelationInput | LoadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loads.
     */
    cursor?: LoadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loads.
     */
    distinct?: LoadsScalarFieldEnum | LoadsScalarFieldEnum[]
  }

  /**
   * Loads findMany
   */
  export type LoadsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * Filter, which Loads to fetch.
     */
    where?: LoadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadsOrderByWithRelationInput | LoadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Loads.
     */
    cursor?: LoadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    distinct?: LoadsScalarFieldEnum | LoadsScalarFieldEnum[]
  }

  /**
   * Loads create
   */
  export type LoadsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * The data needed to create a Loads.
     */
    data: XOR<LoadsCreateInput, LoadsUncheckedCreateInput>
  }

  /**
   * Loads createMany
   */
  export type LoadsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Loads.
     */
    data: LoadsCreateManyInput | LoadsCreateManyInput[]
  }

  /**
   * Loads update
   */
  export type LoadsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * The data needed to update a Loads.
     */
    data: XOR<LoadsUpdateInput, LoadsUncheckedUpdateInput>
    /**
     * Choose, which Loads to update.
     */
    where: LoadsWhereUniqueInput
  }

  /**
   * Loads updateMany
   */
  export type LoadsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Loads.
     */
    data: XOR<LoadsUpdateManyMutationInput, LoadsUncheckedUpdateManyInput>
    /**
     * Filter which Loads to update
     */
    where?: LoadsWhereInput
  }

  /**
   * Loads upsert
   */
  export type LoadsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * The filter to search for the Loads to update in case it exists.
     */
    where: LoadsWhereUniqueInput
    /**
     * In case the Loads found by the `where` argument doesn't exist, create a new Loads with this data.
     */
    create: XOR<LoadsCreateInput, LoadsUncheckedCreateInput>
    /**
     * In case the Loads was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoadsUpdateInput, LoadsUncheckedUpdateInput>
  }

  /**
   * Loads delete
   */
  export type LoadsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
    /**
     * Filter which Loads to delete.
     */
    where: LoadsWhereUniqueInput
  }

  /**
   * Loads deleteMany
   */
  export type LoadsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loads to delete
     */
    where?: LoadsWhereInput
  }

  /**
   * Loads findRaw
   */
  export type LoadsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Loads aggregateRaw
   */
  export type LoadsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Loads.truckPrices
   */
  export type Loads$truckPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    where?: TruckPriceWhereInput
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    cursor?: TruckPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * Loads without action
   */
  export type LoadsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loads
     */
    select?: LoadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadsInclude<ExtArgs> | null
  }


  /**
   * Model Trucks
   */

  export type AggregateTrucks = {
    _count: TrucksCountAggregateOutputType | null
    _avg: TrucksAvgAggregateOutputType | null
    _sum: TrucksSumAggregateOutputType | null
    _min: TrucksMinAggregateOutputType | null
    _max: TrucksMaxAggregateOutputType | null
  }

  export type TrucksAvgAggregateOutputType = {
    truckCapacity: number | null
  }

  export type TrucksSumAggregateOutputType = {
    truckCapacity: number | null
  }

  export type TrucksMinAggregateOutputType = {
    id: string | null
    driverName: string | null
    truckEmail: string | null
    license: string | null
    truckCapacity: number | null
  }

  export type TrucksMaxAggregateOutputType = {
    id: string | null
    driverName: string | null
    truckEmail: string | null
    license: string | null
    truckCapacity: number | null
  }

  export type TrucksCountAggregateOutputType = {
    id: number
    driverName: number
    truckEmail: number
    license: number
    truckCapacity: number
    favLoads: number
    bookedLoads: number
    _all: number
  }


  export type TrucksAvgAggregateInputType = {
    truckCapacity?: true
  }

  export type TrucksSumAggregateInputType = {
    truckCapacity?: true
  }

  export type TrucksMinAggregateInputType = {
    id?: true
    driverName?: true
    truckEmail?: true
    license?: true
    truckCapacity?: true
  }

  export type TrucksMaxAggregateInputType = {
    id?: true
    driverName?: true
    truckEmail?: true
    license?: true
    truckCapacity?: true
  }

  export type TrucksCountAggregateInputType = {
    id?: true
    driverName?: true
    truckEmail?: true
    license?: true
    truckCapacity?: true
    favLoads?: true
    bookedLoads?: true
    _all?: true
  }

  export type TrucksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trucks to aggregate.
     */
    where?: TrucksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trucks to fetch.
     */
    orderBy?: TrucksOrderByWithRelationInput | TrucksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrucksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trucks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trucks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trucks
    **/
    _count?: true | TrucksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrucksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrucksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrucksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrucksMaxAggregateInputType
  }

  export type GetTrucksAggregateType<T extends TrucksAggregateArgs> = {
        [P in keyof T & keyof AggregateTrucks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrucks[P]>
      : GetScalarType<T[P], AggregateTrucks[P]>
  }




  export type TrucksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrucksWhereInput
    orderBy?: TrucksOrderByWithAggregationInput | TrucksOrderByWithAggregationInput[]
    by: TrucksScalarFieldEnum[] | TrucksScalarFieldEnum
    having?: TrucksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrucksCountAggregateInputType | true
    _avg?: TrucksAvgAggregateInputType
    _sum?: TrucksSumAggregateInputType
    _min?: TrucksMinAggregateInputType
    _max?: TrucksMaxAggregateInputType
  }

  export type TrucksGroupByOutputType = {
    id: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads: string[]
    bookedLoads: JsonValue[]
    _count: TrucksCountAggregateOutputType | null
    _avg: TrucksAvgAggregateOutputType | null
    _sum: TrucksSumAggregateOutputType | null
    _min: TrucksMinAggregateOutputType | null
    _max: TrucksMaxAggregateOutputType | null
  }

  type GetTrucksGroupByPayload<T extends TrucksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrucksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrucksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrucksGroupByOutputType[P]>
            : GetScalarType<T[P], TrucksGroupByOutputType[P]>
        }
      >
    >


  export type TrucksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    driverName?: boolean
    truckEmail?: boolean
    license?: boolean
    truckCapacity?: boolean
    favLoads?: boolean
    bookedLoads?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    TruckPrice?: boolean | Trucks$TruckPriceArgs<ExtArgs>
    _count?: boolean | TrucksCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trucks"]>

  export type TrucksSelectScalar = {
    id?: boolean
    driverName?: boolean
    truckEmail?: boolean
    license?: boolean
    truckCapacity?: boolean
    favLoads?: boolean
    bookedLoads?: boolean
  }


  export type TrucksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    TruckPrice?: boolean | Trucks$TruckPriceArgs<ExtArgs>
    _count?: boolean | TrucksCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TrucksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trucks"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      TruckPrice: Prisma.$TruckPricePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      driverName: string
      truckEmail: string
      license: string
      truckCapacity: number
      favLoads: string[]
      bookedLoads: Prisma.JsonValue[]
    }, ExtArgs["result"]["trucks"]>
    composites: {}
  }


  type TrucksGetPayload<S extends boolean | null | undefined | TrucksDefaultArgs> = $Result.GetResult<Prisma.$TrucksPayload, S>

  type TrucksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TrucksFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrucksCountAggregateInputType | true
    }

  export interface TrucksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trucks'], meta: { name: 'Trucks' } }
    /**
     * Find zero or one Trucks that matches the filter.
     * @param {TrucksFindUniqueArgs} args - Arguments to find a Trucks
     * @example
     * // Get one Trucks
     * const trucks = await prisma.trucks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrucksFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TrucksFindUniqueArgs<ExtArgs>>
    ): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Trucks that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TrucksFindUniqueOrThrowArgs} args - Arguments to find a Trucks
     * @example
     * // Get one Trucks
     * const trucks = await prisma.trucks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TrucksFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TrucksFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Trucks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrucksFindFirstArgs} args - Arguments to find a Trucks
     * @example
     * // Get one Trucks
     * const trucks = await prisma.trucks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrucksFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TrucksFindFirstArgs<ExtArgs>>
    ): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Trucks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrucksFindFirstOrThrowArgs} args - Arguments to find a Trucks
     * @example
     * // Get one Trucks
     * const trucks = await prisma.trucks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TrucksFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TrucksFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Trucks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrucksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trucks
     * const trucks = await prisma.trucks.findMany()
     * 
     * // Get first 10 Trucks
     * const trucks = await prisma.trucks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trucksWithIdOnly = await prisma.trucks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrucksFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrucksFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Trucks.
     * @param {TrucksCreateArgs} args - Arguments to create a Trucks.
     * @example
     * // Create one Trucks
     * const Trucks = await prisma.trucks.create({
     *   data: {
     *     // ... data to create a Trucks
     *   }
     * })
     * 
    **/
    create<T extends TrucksCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TrucksCreateArgs<ExtArgs>>
    ): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Trucks.
     * @param {TrucksCreateManyArgs} args - Arguments to create many Trucks.
     * @example
     * // Create many Trucks
     * const trucks = await prisma.trucks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TrucksCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrucksCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trucks.
     * @param {TrucksDeleteArgs} args - Arguments to delete one Trucks.
     * @example
     * // Delete one Trucks
     * const Trucks = await prisma.trucks.delete({
     *   where: {
     *     // ... filter to delete one Trucks
     *   }
     * })
     * 
    **/
    delete<T extends TrucksDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TrucksDeleteArgs<ExtArgs>>
    ): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Trucks.
     * @param {TrucksUpdateArgs} args - Arguments to update one Trucks.
     * @example
     * // Update one Trucks
     * const trucks = await prisma.trucks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrucksUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TrucksUpdateArgs<ExtArgs>>
    ): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Trucks.
     * @param {TrucksDeleteManyArgs} args - Arguments to filter Trucks to delete.
     * @example
     * // Delete a few Trucks
     * const { count } = await prisma.trucks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrucksDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrucksDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trucks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrucksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trucks
     * const trucks = await prisma.trucks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrucksUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TrucksUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trucks.
     * @param {TrucksUpsertArgs} args - Arguments to update or create a Trucks.
     * @example
     * // Update or create a Trucks
     * const trucks = await prisma.trucks.upsert({
     *   create: {
     *     // ... data to create a Trucks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trucks we want to update
     *   }
     * })
    **/
    upsert<T extends TrucksUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TrucksUpsertArgs<ExtArgs>>
    ): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Trucks that matches the filter.
     * @param {TrucksFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const trucks = await prisma.trucks.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TrucksFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Trucks.
     * @param {TrucksAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const trucks = await prisma.trucks.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TrucksAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Trucks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrucksCountArgs} args - Arguments to filter Trucks to count.
     * @example
     * // Count the number of Trucks
     * const count = await prisma.trucks.count({
     *   where: {
     *     // ... the filter for the Trucks we want to count
     *   }
     * })
    **/
    count<T extends TrucksCountArgs>(
      args?: Subset<T, TrucksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrucksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trucks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrucksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrucksAggregateArgs>(args: Subset<T, TrucksAggregateArgs>): Prisma.PrismaPromise<GetTrucksAggregateType<T>>

    /**
     * Group by Trucks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrucksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrucksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrucksGroupByArgs['orderBy'] }
        : { orderBy?: TrucksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrucksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrucksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trucks model
   */
  readonly fields: TrucksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trucks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrucksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    TruckPrice<T extends Trucks$TruckPriceArgs<ExtArgs> = {}>(args?: Subset<T, Trucks$TruckPriceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Trucks model
   */ 
  interface TrucksFieldRefs {
    readonly id: FieldRef<"Trucks", 'String'>
    readonly driverName: FieldRef<"Trucks", 'String'>
    readonly truckEmail: FieldRef<"Trucks", 'String'>
    readonly license: FieldRef<"Trucks", 'String'>
    readonly truckCapacity: FieldRef<"Trucks", 'Int'>
    readonly favLoads: FieldRef<"Trucks", 'String[]'>
    readonly bookedLoads: FieldRef<"Trucks", 'Json[]'>
  }
    

  // Custom InputTypes
  /**
   * Trucks findUnique
   */
  export type TrucksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * Filter, which Trucks to fetch.
     */
    where: TrucksWhereUniqueInput
  }

  /**
   * Trucks findUniqueOrThrow
   */
  export type TrucksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * Filter, which Trucks to fetch.
     */
    where: TrucksWhereUniqueInput
  }

  /**
   * Trucks findFirst
   */
  export type TrucksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * Filter, which Trucks to fetch.
     */
    where?: TrucksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trucks to fetch.
     */
    orderBy?: TrucksOrderByWithRelationInput | TrucksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trucks.
     */
    cursor?: TrucksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trucks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trucks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trucks.
     */
    distinct?: TrucksScalarFieldEnum | TrucksScalarFieldEnum[]
  }

  /**
   * Trucks findFirstOrThrow
   */
  export type TrucksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * Filter, which Trucks to fetch.
     */
    where?: TrucksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trucks to fetch.
     */
    orderBy?: TrucksOrderByWithRelationInput | TrucksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trucks.
     */
    cursor?: TrucksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trucks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trucks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trucks.
     */
    distinct?: TrucksScalarFieldEnum | TrucksScalarFieldEnum[]
  }

  /**
   * Trucks findMany
   */
  export type TrucksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * Filter, which Trucks to fetch.
     */
    where?: TrucksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trucks to fetch.
     */
    orderBy?: TrucksOrderByWithRelationInput | TrucksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trucks.
     */
    cursor?: TrucksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trucks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trucks.
     */
    skip?: number
    distinct?: TrucksScalarFieldEnum | TrucksScalarFieldEnum[]
  }

  /**
   * Trucks create
   */
  export type TrucksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * The data needed to create a Trucks.
     */
    data: XOR<TrucksCreateInput, TrucksUncheckedCreateInput>
  }

  /**
   * Trucks createMany
   */
  export type TrucksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trucks.
     */
    data: TrucksCreateManyInput | TrucksCreateManyInput[]
  }

  /**
   * Trucks update
   */
  export type TrucksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * The data needed to update a Trucks.
     */
    data: XOR<TrucksUpdateInput, TrucksUncheckedUpdateInput>
    /**
     * Choose, which Trucks to update.
     */
    where: TrucksWhereUniqueInput
  }

  /**
   * Trucks updateMany
   */
  export type TrucksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trucks.
     */
    data: XOR<TrucksUpdateManyMutationInput, TrucksUncheckedUpdateManyInput>
    /**
     * Filter which Trucks to update
     */
    where?: TrucksWhereInput
  }

  /**
   * Trucks upsert
   */
  export type TrucksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * The filter to search for the Trucks to update in case it exists.
     */
    where: TrucksWhereUniqueInput
    /**
     * In case the Trucks found by the `where` argument doesn't exist, create a new Trucks with this data.
     */
    create: XOR<TrucksCreateInput, TrucksUncheckedCreateInput>
    /**
     * In case the Trucks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrucksUpdateInput, TrucksUncheckedUpdateInput>
  }

  /**
   * Trucks delete
   */
  export type TrucksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
    /**
     * Filter which Trucks to delete.
     */
    where: TrucksWhereUniqueInput
  }

  /**
   * Trucks deleteMany
   */
  export type TrucksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trucks to delete
     */
    where?: TrucksWhereInput
  }

  /**
   * Trucks findRaw
   */
  export type TrucksFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Trucks aggregateRaw
   */
  export type TrucksAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Trucks.TruckPrice
   */
  export type Trucks$TruckPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    where?: TruckPriceWhereInput
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    cursor?: TruckPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * Trucks without action
   */
  export type TrucksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trucks
     */
    select?: TrucksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrucksInclude<ExtArgs> | null
  }


  /**
   * Model TruckPrice
   */

  export type AggregateTruckPrice = {
    _count: TruckPriceCountAggregateOutputType | null
    _avg: TruckPriceAvgAggregateOutputType | null
    _sum: TruckPriceSumAggregateOutputType | null
    _min: TruckPriceMinAggregateOutputType | null
    _max: TruckPriceMaxAggregateOutputType | null
  }

  export type TruckPriceAvgAggregateOutputType = {
    quotedPrice: number | null
  }

  export type TruckPriceSumAggregateOutputType = {
    quotedPrice: number | null
  }

  export type TruckPriceMinAggregateOutputType = {
    id: string | null
    loadId: string | null
    truckId: string | null
    quotedPrice: number | null
  }

  export type TruckPriceMaxAggregateOutputType = {
    id: string | null
    loadId: string | null
    truckId: string | null
    quotedPrice: number | null
  }

  export type TruckPriceCountAggregateOutputType = {
    id: number
    loadId: number
    truckId: number
    quotedPrice: number
    _all: number
  }


  export type TruckPriceAvgAggregateInputType = {
    quotedPrice?: true
  }

  export type TruckPriceSumAggregateInputType = {
    quotedPrice?: true
  }

  export type TruckPriceMinAggregateInputType = {
    id?: true
    loadId?: true
    truckId?: true
    quotedPrice?: true
  }

  export type TruckPriceMaxAggregateInputType = {
    id?: true
    loadId?: true
    truckId?: true
    quotedPrice?: true
  }

  export type TruckPriceCountAggregateInputType = {
    id?: true
    loadId?: true
    truckId?: true
    quotedPrice?: true
    _all?: true
  }

  export type TruckPriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TruckPrice to aggregate.
     */
    where?: TruckPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckPrices to fetch.
     */
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TruckPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TruckPrices
    **/
    _count?: true | TruckPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TruckPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TruckPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TruckPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TruckPriceMaxAggregateInputType
  }

  export type GetTruckPriceAggregateType<T extends TruckPriceAggregateArgs> = {
        [P in keyof T & keyof AggregateTruckPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTruckPrice[P]>
      : GetScalarType<T[P], AggregateTruckPrice[P]>
  }




  export type TruckPriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckPriceWhereInput
    orderBy?: TruckPriceOrderByWithAggregationInput | TruckPriceOrderByWithAggregationInput[]
    by: TruckPriceScalarFieldEnum[] | TruckPriceScalarFieldEnum
    having?: TruckPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TruckPriceCountAggregateInputType | true
    _avg?: TruckPriceAvgAggregateInputType
    _sum?: TruckPriceSumAggregateInputType
    _min?: TruckPriceMinAggregateInputType
    _max?: TruckPriceMaxAggregateInputType
  }

  export type TruckPriceGroupByOutputType = {
    id: string
    loadId: string
    truckId: string
    quotedPrice: number
    _count: TruckPriceCountAggregateOutputType | null
    _avg: TruckPriceAvgAggregateOutputType | null
    _sum: TruckPriceSumAggregateOutputType | null
    _min: TruckPriceMinAggregateOutputType | null
    _max: TruckPriceMaxAggregateOutputType | null
  }

  type GetTruckPriceGroupByPayload<T extends TruckPriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TruckPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TruckPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TruckPriceGroupByOutputType[P]>
            : GetScalarType<T[P], TruckPriceGroupByOutputType[P]>
        }
      >
    >


  export type TruckPriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loadId?: boolean
    truckId?: boolean
    quotedPrice?: boolean
    load?: boolean | LoadsDefaultArgs<ExtArgs>
    truck?: boolean | TrucksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["truckPrice"]>

  export type TruckPriceSelectScalar = {
    id?: boolean
    loadId?: boolean
    truckId?: boolean
    quotedPrice?: boolean
  }


  export type TruckPriceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    load?: boolean | LoadsDefaultArgs<ExtArgs>
    truck?: boolean | TrucksDefaultArgs<ExtArgs>
  }


  export type $TruckPricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TruckPrice"
    objects: {
      load: Prisma.$LoadsPayload<ExtArgs>
      truck: Prisma.$TrucksPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loadId: string
      truckId: string
      quotedPrice: number
    }, ExtArgs["result"]["truckPrice"]>
    composites: {}
  }


  type TruckPriceGetPayload<S extends boolean | null | undefined | TruckPriceDefaultArgs> = $Result.GetResult<Prisma.$TruckPricePayload, S>

  type TruckPriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TruckPriceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TruckPriceCountAggregateInputType | true
    }

  export interface TruckPriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TruckPrice'], meta: { name: 'TruckPrice' } }
    /**
     * Find zero or one TruckPrice that matches the filter.
     * @param {TruckPriceFindUniqueArgs} args - Arguments to find a TruckPrice
     * @example
     * // Get one TruckPrice
     * const truckPrice = await prisma.truckPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TruckPriceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceFindUniqueArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TruckPrice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TruckPriceFindUniqueOrThrowArgs} args - Arguments to find a TruckPrice
     * @example
     * // Get one TruckPrice
     * const truckPrice = await prisma.truckPrice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TruckPriceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TruckPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceFindFirstArgs} args - Arguments to find a TruckPrice
     * @example
     * // Get one TruckPrice
     * const truckPrice = await prisma.truckPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TruckPriceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceFindFirstArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TruckPrice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceFindFirstOrThrowArgs} args - Arguments to find a TruckPrice
     * @example
     * // Get one TruckPrice
     * const truckPrice = await prisma.truckPrice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TruckPriceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TruckPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TruckPrices
     * const truckPrices = await prisma.truckPrice.findMany()
     * 
     * // Get first 10 TruckPrices
     * const truckPrices = await prisma.truckPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const truckPriceWithIdOnly = await prisma.truckPrice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TruckPriceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TruckPrice.
     * @param {TruckPriceCreateArgs} args - Arguments to create a TruckPrice.
     * @example
     * // Create one TruckPrice
     * const TruckPrice = await prisma.truckPrice.create({
     *   data: {
     *     // ... data to create a TruckPrice
     *   }
     * })
     * 
    **/
    create<T extends TruckPriceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceCreateArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TruckPrices.
     * @param {TruckPriceCreateManyArgs} args - Arguments to create many TruckPrices.
     * @example
     * // Create many TruckPrices
     * const truckPrice = await prisma.truckPrice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TruckPriceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TruckPrice.
     * @param {TruckPriceDeleteArgs} args - Arguments to delete one TruckPrice.
     * @example
     * // Delete one TruckPrice
     * const TruckPrice = await prisma.truckPrice.delete({
     *   where: {
     *     // ... filter to delete one TruckPrice
     *   }
     * })
     * 
    **/
    delete<T extends TruckPriceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceDeleteArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TruckPrice.
     * @param {TruckPriceUpdateArgs} args - Arguments to update one TruckPrice.
     * @example
     * // Update one TruckPrice
     * const truckPrice = await prisma.truckPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TruckPriceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceUpdateArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TruckPrices.
     * @param {TruckPriceDeleteManyArgs} args - Arguments to filter TruckPrices to delete.
     * @example
     * // Delete a few TruckPrices
     * const { count } = await prisma.truckPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TruckPriceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TruckPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TruckPrices
     * const truckPrice = await prisma.truckPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TruckPriceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TruckPrice.
     * @param {TruckPriceUpsertArgs} args - Arguments to update or create a TruckPrice.
     * @example
     * // Update or create a TruckPrice
     * const truckPrice = await prisma.truckPrice.upsert({
     *   create: {
     *     // ... data to create a TruckPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TruckPrice we want to update
     *   }
     * })
    **/
    upsert<T extends TruckPriceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceUpsertArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more TruckPrices that matches the filter.
     * @param {TruckPriceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const truckPrice = await prisma.truckPrice.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TruckPriceFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TruckPrice.
     * @param {TruckPriceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const truckPrice = await prisma.truckPrice.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TruckPriceAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of TruckPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceCountArgs} args - Arguments to filter TruckPrices to count.
     * @example
     * // Count the number of TruckPrices
     * const count = await prisma.truckPrice.count({
     *   where: {
     *     // ... the filter for the TruckPrices we want to count
     *   }
     * })
    **/
    count<T extends TruckPriceCountArgs>(
      args?: Subset<T, TruckPriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TruckPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TruckPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TruckPriceAggregateArgs>(args: Subset<T, TruckPriceAggregateArgs>): Prisma.PrismaPromise<GetTruckPriceAggregateType<T>>

    /**
     * Group by TruckPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TruckPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TruckPriceGroupByArgs['orderBy'] }
        : { orderBy?: TruckPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TruckPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTruckPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TruckPrice model
   */
  readonly fields: TruckPriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TruckPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TruckPriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    load<T extends LoadsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoadsDefaultArgs<ExtArgs>>): Prisma__LoadsClient<$Result.GetResult<Prisma.$LoadsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    truck<T extends TrucksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrucksDefaultArgs<ExtArgs>>): Prisma__TrucksClient<$Result.GetResult<Prisma.$TrucksPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TruckPrice model
   */ 
  interface TruckPriceFieldRefs {
    readonly id: FieldRef<"TruckPrice", 'String'>
    readonly loadId: FieldRef<"TruckPrice", 'String'>
    readonly truckId: FieldRef<"TruckPrice", 'String'>
    readonly quotedPrice: FieldRef<"TruckPrice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TruckPrice findUnique
   */
  export type TruckPriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrice to fetch.
     */
    where: TruckPriceWhereUniqueInput
  }

  /**
   * TruckPrice findUniqueOrThrow
   */
  export type TruckPriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrice to fetch.
     */
    where: TruckPriceWhereUniqueInput
  }

  /**
   * TruckPrice findFirst
   */
  export type TruckPriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrice to fetch.
     */
    where?: TruckPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckPrices to fetch.
     */
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TruckPrices.
     */
    cursor?: TruckPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TruckPrices.
     */
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * TruckPrice findFirstOrThrow
   */
  export type TruckPriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrice to fetch.
     */
    where?: TruckPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckPrices to fetch.
     */
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TruckPrices.
     */
    cursor?: TruckPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TruckPrices.
     */
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * TruckPrice findMany
   */
  export type TruckPriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrices to fetch.
     */
    where?: TruckPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckPrices to fetch.
     */
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TruckPrices.
     */
    cursor?: TruckPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckPrices.
     */
    skip?: number
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * TruckPrice create
   */
  export type TruckPriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * The data needed to create a TruckPrice.
     */
    data: XOR<TruckPriceCreateInput, TruckPriceUncheckedCreateInput>
  }

  /**
   * TruckPrice createMany
   */
  export type TruckPriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TruckPrices.
     */
    data: TruckPriceCreateManyInput | TruckPriceCreateManyInput[]
  }

  /**
   * TruckPrice update
   */
  export type TruckPriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * The data needed to update a TruckPrice.
     */
    data: XOR<TruckPriceUpdateInput, TruckPriceUncheckedUpdateInput>
    /**
     * Choose, which TruckPrice to update.
     */
    where: TruckPriceWhereUniqueInput
  }

  /**
   * TruckPrice updateMany
   */
  export type TruckPriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TruckPrices.
     */
    data: XOR<TruckPriceUpdateManyMutationInput, TruckPriceUncheckedUpdateManyInput>
    /**
     * Filter which TruckPrices to update
     */
    where?: TruckPriceWhereInput
  }

  /**
   * TruckPrice upsert
   */
  export type TruckPriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * The filter to search for the TruckPrice to update in case it exists.
     */
    where: TruckPriceWhereUniqueInput
    /**
     * In case the TruckPrice found by the `where` argument doesn't exist, create a new TruckPrice with this data.
     */
    create: XOR<TruckPriceCreateInput, TruckPriceUncheckedCreateInput>
    /**
     * In case the TruckPrice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TruckPriceUpdateInput, TruckPriceUncheckedUpdateInput>
  }

  /**
   * TruckPrice delete
   */
  export type TruckPriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter which TruckPrice to delete.
     */
    where: TruckPriceWhereUniqueInput
  }

  /**
   * TruckPrice deleteMany
   */
  export type TruckPriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TruckPrices to delete
     */
    where?: TruckPriceWhereInput
  }

  /**
   * TruckPrice findRaw
   */
  export type TruckPriceFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TruckPrice aggregateRaw
   */
  export type TruckPriceAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TruckPrice without action
   */
  export type TruckPriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LoadsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    price: 'price',
    fromAddress: 'fromAddress',
    toAddress: 'toAddress',
    image: 'image',
    userEmail: 'userEmail',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LoadsScalarFieldEnum = (typeof LoadsScalarFieldEnum)[keyof typeof LoadsScalarFieldEnum]


  export const TrucksScalarFieldEnum: {
    id: 'id',
    driverName: 'driverName',
    truckEmail: 'truckEmail',
    license: 'license',
    truckCapacity: 'truckCapacity',
    favLoads: 'favLoads',
    bookedLoads: 'bookedLoads'
  };

  export type TrucksScalarFieldEnum = (typeof TrucksScalarFieldEnum)[keyof typeof TrucksScalarFieldEnum]


  export const TruckPriceScalarFieldEnum: {
    id: 'id',
    loadId: 'loadId',
    truckId: 'truckId',
    quotedPrice: 'quotedPrice'
  };

  export type TruckPriceScalarFieldEnum = (typeof TruckPriceScalarFieldEnum)[keyof typeof TruckPriceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    ownedLoads?: LoadsListRelationFilter
    ownedTrucks?: TrucksListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    ownedLoads?: LoadsOrderByRelationAggregateInput
    ownedTrucks?: TrucksOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    ownedLoads?: LoadsListRelationFilter
    ownedTrucks?: TrucksListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type LoadsWhereInput = {
    AND?: LoadsWhereInput | LoadsWhereInput[]
    OR?: LoadsWhereInput[]
    NOT?: LoadsWhereInput | LoadsWhereInput[]
    id?: StringFilter<"Loads"> | string
    title?: StringFilter<"Loads"> | string
    description?: StringFilter<"Loads"> | string
    price?: IntFilter<"Loads"> | number
    fromAddress?: StringFilter<"Loads"> | string
    toAddress?: StringFilter<"Loads"> | string
    image?: StringFilter<"Loads"> | string
    userEmail?: StringFilter<"Loads"> | string
    createdAt?: DateTimeFilter<"Loads"> | Date | string
    updatedAt?: DateTimeFilter<"Loads"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    truckPrices?: TruckPriceListRelationFilter
  }

  export type LoadsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    truckPrices?: TruckPriceOrderByRelationAggregateInput
  }

  export type LoadsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoadsWhereInput | LoadsWhereInput[]
    OR?: LoadsWhereInput[]
    NOT?: LoadsWhereInput | LoadsWhereInput[]
    title?: StringFilter<"Loads"> | string
    description?: StringFilter<"Loads"> | string
    price?: IntFilter<"Loads"> | number
    fromAddress?: StringFilter<"Loads"> | string
    toAddress?: StringFilter<"Loads"> | string
    image?: StringFilter<"Loads"> | string
    userEmail?: StringFilter<"Loads"> | string
    createdAt?: DateTimeFilter<"Loads"> | Date | string
    updatedAt?: DateTimeFilter<"Loads"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    truckPrices?: TruckPriceListRelationFilter
  }, "id">

  export type LoadsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LoadsCountOrderByAggregateInput
    _avg?: LoadsAvgOrderByAggregateInput
    _max?: LoadsMaxOrderByAggregateInput
    _min?: LoadsMinOrderByAggregateInput
    _sum?: LoadsSumOrderByAggregateInput
  }

  export type LoadsScalarWhereWithAggregatesInput = {
    AND?: LoadsScalarWhereWithAggregatesInput | LoadsScalarWhereWithAggregatesInput[]
    OR?: LoadsScalarWhereWithAggregatesInput[]
    NOT?: LoadsScalarWhereWithAggregatesInput | LoadsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Loads"> | string
    title?: StringWithAggregatesFilter<"Loads"> | string
    description?: StringWithAggregatesFilter<"Loads"> | string
    price?: IntWithAggregatesFilter<"Loads"> | number
    fromAddress?: StringWithAggregatesFilter<"Loads"> | string
    toAddress?: StringWithAggregatesFilter<"Loads"> | string
    image?: StringWithAggregatesFilter<"Loads"> | string
    userEmail?: StringWithAggregatesFilter<"Loads"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Loads"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Loads"> | Date | string
  }

  export type TrucksWhereInput = {
    AND?: TrucksWhereInput | TrucksWhereInput[]
    OR?: TrucksWhereInput[]
    NOT?: TrucksWhereInput | TrucksWhereInput[]
    id?: StringFilter<"Trucks"> | string
    driverName?: StringFilter<"Trucks"> | string
    truckEmail?: StringFilter<"Trucks"> | string
    license?: StringFilter<"Trucks"> | string
    truckCapacity?: IntFilter<"Trucks"> | number
    favLoads?: StringNullableListFilter<"Trucks">
    bookedLoads?: JsonNullableListFilter<"Trucks">
    owner?: XOR<UserRelationFilter, UserWhereInput>
    TruckPrice?: TruckPriceListRelationFilter
  }

  export type TrucksOrderByWithRelationInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
    favLoads?: SortOrder
    bookedLoads?: SortOrder
    owner?: UserOrderByWithRelationInput
    TruckPrice?: TruckPriceOrderByRelationAggregateInput
  }

  export type TrucksWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    license?: string
    license_truckEmail?: TrucksLicenseTruckEmailCompoundUniqueInput
    AND?: TrucksWhereInput | TrucksWhereInput[]
    OR?: TrucksWhereInput[]
    NOT?: TrucksWhereInput | TrucksWhereInput[]
    driverName?: StringFilter<"Trucks"> | string
    truckEmail?: StringFilter<"Trucks"> | string
    truckCapacity?: IntFilter<"Trucks"> | number
    favLoads?: StringNullableListFilter<"Trucks">
    bookedLoads?: JsonNullableListFilter<"Trucks">
    owner?: XOR<UserRelationFilter, UserWhereInput>
    TruckPrice?: TruckPriceListRelationFilter
  }, "id" | "license" | "license_truckEmail">

  export type TrucksOrderByWithAggregationInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
    favLoads?: SortOrder
    bookedLoads?: SortOrder
    _count?: TrucksCountOrderByAggregateInput
    _avg?: TrucksAvgOrderByAggregateInput
    _max?: TrucksMaxOrderByAggregateInput
    _min?: TrucksMinOrderByAggregateInput
    _sum?: TrucksSumOrderByAggregateInput
  }

  export type TrucksScalarWhereWithAggregatesInput = {
    AND?: TrucksScalarWhereWithAggregatesInput | TrucksScalarWhereWithAggregatesInput[]
    OR?: TrucksScalarWhereWithAggregatesInput[]
    NOT?: TrucksScalarWhereWithAggregatesInput | TrucksScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Trucks"> | string
    driverName?: StringWithAggregatesFilter<"Trucks"> | string
    truckEmail?: StringWithAggregatesFilter<"Trucks"> | string
    license?: StringWithAggregatesFilter<"Trucks"> | string
    truckCapacity?: IntWithAggregatesFilter<"Trucks"> | number
    favLoads?: StringNullableListFilter<"Trucks">
    bookedLoads?: JsonNullableListFilter<"Trucks">
  }

  export type TruckPriceWhereInput = {
    AND?: TruckPriceWhereInput | TruckPriceWhereInput[]
    OR?: TruckPriceWhereInput[]
    NOT?: TruckPriceWhereInput | TruckPriceWhereInput[]
    id?: StringFilter<"TruckPrice"> | string
    loadId?: StringFilter<"TruckPrice"> | string
    truckId?: StringFilter<"TruckPrice"> | string
    quotedPrice?: IntFilter<"TruckPrice"> | number
    load?: XOR<LoadsRelationFilter, LoadsWhereInput>
    truck?: XOR<TrucksRelationFilter, TrucksWhereInput>
  }

  export type TruckPriceOrderByWithRelationInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    quotedPrice?: SortOrder
    load?: LoadsOrderByWithRelationInput
    truck?: TrucksOrderByWithRelationInput
  }

  export type TruckPriceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    loadId_truckId?: TruckPriceLoadIdTruckIdCompoundUniqueInput
    AND?: TruckPriceWhereInput | TruckPriceWhereInput[]
    OR?: TruckPriceWhereInput[]
    NOT?: TruckPriceWhereInput | TruckPriceWhereInput[]
    loadId?: StringFilter<"TruckPrice"> | string
    truckId?: StringFilter<"TruckPrice"> | string
    quotedPrice?: IntFilter<"TruckPrice"> | number
    load?: XOR<LoadsRelationFilter, LoadsWhereInput>
    truck?: XOR<TrucksRelationFilter, TrucksWhereInput>
  }, "id" | "loadId_truckId">

  export type TruckPriceOrderByWithAggregationInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    quotedPrice?: SortOrder
    _count?: TruckPriceCountOrderByAggregateInput
    _avg?: TruckPriceAvgOrderByAggregateInput
    _max?: TruckPriceMaxOrderByAggregateInput
    _min?: TruckPriceMinOrderByAggregateInput
    _sum?: TruckPriceSumOrderByAggregateInput
  }

  export type TruckPriceScalarWhereWithAggregatesInput = {
    AND?: TruckPriceScalarWhereWithAggregatesInput | TruckPriceScalarWhereWithAggregatesInput[]
    OR?: TruckPriceScalarWhereWithAggregatesInput[]
    NOT?: TruckPriceScalarWhereWithAggregatesInput | TruckPriceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TruckPrice"> | string
    loadId?: StringWithAggregatesFilter<"TruckPrice"> | string
    truckId?: StringWithAggregatesFilter<"TruckPrice"> | string
    quotedPrice?: IntWithAggregatesFilter<"TruckPrice"> | number
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadsCreateNestedManyWithoutOwnerInput
    ownedTrucks?: TrucksCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadsUncheckedCreateNestedManyWithoutOwnerInput
    ownedTrucks?: TrucksUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadsUpdateManyWithoutOwnerNestedInput
    ownedTrucks?: TrucksUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadsUncheckedUpdateManyWithoutOwnerNestedInput
    ownedTrucks?: TrucksUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoadsCreateInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedLoadsInput
    truckPrices?: TruckPriceCreateNestedManyWithoutLoadInput
  }

  export type LoadsUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    truckPrices?: TruckPriceUncheckedCreateNestedManyWithoutLoadInput
  }

  export type LoadsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedLoadsNestedInput
    truckPrices?: TruckPriceUpdateManyWithoutLoadNestedInput
  }

  export type LoadsUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckPrices?: TruckPriceUncheckedUpdateManyWithoutLoadNestedInput
  }

  export type LoadsCreateManyInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoadsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoadsUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrucksCreateInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TrucksCreatefavLoadsInput | string[]
    bookedLoads?: TrucksCreatebookedLoadsInput | InputJsonValue[]
    owner: UserCreateNestedOneWithoutOwnedTrucksInput
    TruckPrice?: TruckPriceCreateNestedManyWithoutTruckInput
  }

  export type TrucksUncheckedCreateInput = {
    id?: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads?: TrucksCreatefavLoadsInput | string[]
    bookedLoads?: TrucksCreatebookedLoadsInput | InputJsonValue[]
    TruckPrice?: TruckPriceUncheckedCreateNestedManyWithoutTruckInput
  }

  export type TrucksUpdateInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
    owner?: UserUpdateOneRequiredWithoutOwnedTrucksNestedInput
    TruckPrice?: TruckPriceUpdateManyWithoutTruckNestedInput
  }

  export type TrucksUncheckedUpdateInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    truckEmail?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
    TruckPrice?: TruckPriceUncheckedUpdateManyWithoutTruckNestedInput
  }

  export type TrucksCreateManyInput = {
    id?: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads?: TrucksCreatefavLoadsInput | string[]
    bookedLoads?: TrucksCreatebookedLoadsInput | InputJsonValue[]
  }

  export type TrucksUpdateManyMutationInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
  }

  export type TrucksUncheckedUpdateManyInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    truckEmail?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
  }

  export type TruckPriceCreateInput = {
    id?: string
    quotedPrice: number
    load: LoadsCreateNestedOneWithoutTruckPricesInput
    truck: TrucksCreateNestedOneWithoutTruckPriceInput
  }

  export type TruckPriceUncheckedCreateInput = {
    id?: string
    loadId: string
    truckId: string
    quotedPrice: number
  }

  export type TruckPriceUpdateInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
    load?: LoadsUpdateOneRequiredWithoutTruckPricesNestedInput
    truck?: TrucksUpdateOneRequiredWithoutTruckPriceNestedInput
  }

  export type TruckPriceUncheckedUpdateInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceCreateManyInput = {
    id?: string
    loadId: string
    truckId: string
    quotedPrice: number
  }

  export type TruckPriceUpdateManyMutationInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceUncheckedUpdateManyInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type LoadsListRelationFilter = {
    every?: LoadsWhereInput
    some?: LoadsWhereInput
    none?: LoadsWhereInput
  }

  export type TrucksListRelationFilter = {
    every?: TrucksWhereInput
    some?: TrucksWhereInput
    none?: TrucksWhereInput
  }

  export type LoadsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrucksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TruckPriceListRelationFilter = {
    every?: TruckPriceWhereInput
    some?: TruckPriceWhereInput
    none?: TruckPriceWhereInput
  }

  export type TruckPriceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoadsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LoadsAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type LoadsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LoadsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LoadsSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableListFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TrucksLicenseTruckEmailCompoundUniqueInput = {
    license: string
    truckEmail: string
  }

  export type TrucksCountOrderByAggregateInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
    favLoads?: SortOrder
    bookedLoads?: SortOrder
  }

  export type TrucksAvgOrderByAggregateInput = {
    truckCapacity?: SortOrder
  }

  export type TrucksMaxOrderByAggregateInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
  }

  export type TrucksMinOrderByAggregateInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
  }

  export type TrucksSumOrderByAggregateInput = {
    truckCapacity?: SortOrder
  }

  export type LoadsRelationFilter = {
    is?: LoadsWhereInput
    isNot?: LoadsWhereInput
  }

  export type TrucksRelationFilter = {
    is?: TrucksWhereInput
    isNot?: TrucksWhereInput
  }

  export type TruckPriceLoadIdTruckIdCompoundUniqueInput = {
    loadId: string
    truckId: string
  }

  export type TruckPriceCountOrderByAggregateInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    quotedPrice?: SortOrder
  }

  export type TruckPriceAvgOrderByAggregateInput = {
    quotedPrice?: SortOrder
  }

  export type TruckPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    quotedPrice?: SortOrder
  }

  export type TruckPriceMinOrderByAggregateInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    quotedPrice?: SortOrder
  }

  export type TruckPriceSumOrderByAggregateInput = {
    quotedPrice?: SortOrder
  }

  export type LoadsCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LoadsCreateWithoutOwnerInput, LoadsUncheckedCreateWithoutOwnerInput> | LoadsCreateWithoutOwnerInput[] | LoadsUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LoadsCreateOrConnectWithoutOwnerInput | LoadsCreateOrConnectWithoutOwnerInput[]
    createMany?: LoadsCreateManyOwnerInputEnvelope
    connect?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
  }

  export type TrucksCreateNestedManyWithoutOwnerInput = {
    create?: XOR<TrucksCreateWithoutOwnerInput, TrucksUncheckedCreateWithoutOwnerInput> | TrucksCreateWithoutOwnerInput[] | TrucksUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: TrucksCreateOrConnectWithoutOwnerInput | TrucksCreateOrConnectWithoutOwnerInput[]
    createMany?: TrucksCreateManyOwnerInputEnvelope
    connect?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
  }

  export type LoadsUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LoadsCreateWithoutOwnerInput, LoadsUncheckedCreateWithoutOwnerInput> | LoadsCreateWithoutOwnerInput[] | LoadsUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LoadsCreateOrConnectWithoutOwnerInput | LoadsCreateOrConnectWithoutOwnerInput[]
    createMany?: LoadsCreateManyOwnerInputEnvelope
    connect?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
  }

  export type TrucksUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<TrucksCreateWithoutOwnerInput, TrucksUncheckedCreateWithoutOwnerInput> | TrucksCreateWithoutOwnerInput[] | TrucksUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: TrucksCreateOrConnectWithoutOwnerInput | TrucksCreateOrConnectWithoutOwnerInput[]
    createMany?: TrucksCreateManyOwnerInputEnvelope
    connect?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type LoadsUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LoadsCreateWithoutOwnerInput, LoadsUncheckedCreateWithoutOwnerInput> | LoadsCreateWithoutOwnerInput[] | LoadsUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LoadsCreateOrConnectWithoutOwnerInput | LoadsCreateOrConnectWithoutOwnerInput[]
    upsert?: LoadsUpsertWithWhereUniqueWithoutOwnerInput | LoadsUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LoadsCreateManyOwnerInputEnvelope
    set?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
    disconnect?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
    delete?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
    connect?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
    update?: LoadsUpdateWithWhereUniqueWithoutOwnerInput | LoadsUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LoadsUpdateManyWithWhereWithoutOwnerInput | LoadsUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LoadsScalarWhereInput | LoadsScalarWhereInput[]
  }

  export type TrucksUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<TrucksCreateWithoutOwnerInput, TrucksUncheckedCreateWithoutOwnerInput> | TrucksCreateWithoutOwnerInput[] | TrucksUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: TrucksCreateOrConnectWithoutOwnerInput | TrucksCreateOrConnectWithoutOwnerInput[]
    upsert?: TrucksUpsertWithWhereUniqueWithoutOwnerInput | TrucksUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: TrucksCreateManyOwnerInputEnvelope
    set?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
    disconnect?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
    delete?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
    connect?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
    update?: TrucksUpdateWithWhereUniqueWithoutOwnerInput | TrucksUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: TrucksUpdateManyWithWhereWithoutOwnerInput | TrucksUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: TrucksScalarWhereInput | TrucksScalarWhereInput[]
  }

  export type LoadsUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LoadsCreateWithoutOwnerInput, LoadsUncheckedCreateWithoutOwnerInput> | LoadsCreateWithoutOwnerInput[] | LoadsUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LoadsCreateOrConnectWithoutOwnerInput | LoadsCreateOrConnectWithoutOwnerInput[]
    upsert?: LoadsUpsertWithWhereUniqueWithoutOwnerInput | LoadsUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LoadsCreateManyOwnerInputEnvelope
    set?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
    disconnect?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
    delete?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
    connect?: LoadsWhereUniqueInput | LoadsWhereUniqueInput[]
    update?: LoadsUpdateWithWhereUniqueWithoutOwnerInput | LoadsUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LoadsUpdateManyWithWhereWithoutOwnerInput | LoadsUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LoadsScalarWhereInput | LoadsScalarWhereInput[]
  }

  export type TrucksUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<TrucksCreateWithoutOwnerInput, TrucksUncheckedCreateWithoutOwnerInput> | TrucksCreateWithoutOwnerInput[] | TrucksUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: TrucksCreateOrConnectWithoutOwnerInput | TrucksCreateOrConnectWithoutOwnerInput[]
    upsert?: TrucksUpsertWithWhereUniqueWithoutOwnerInput | TrucksUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: TrucksCreateManyOwnerInputEnvelope
    set?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
    disconnect?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
    delete?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
    connect?: TrucksWhereUniqueInput | TrucksWhereUniqueInput[]
    update?: TrucksUpdateWithWhereUniqueWithoutOwnerInput | TrucksUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: TrucksUpdateManyWithWhereWithoutOwnerInput | TrucksUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: TrucksScalarWhereInput | TrucksScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOwnedLoadsInput = {
    create?: XOR<UserCreateWithoutOwnedLoadsInput, UserUncheckedCreateWithoutOwnedLoadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLoadsInput
    connect?: UserWhereUniqueInput
  }

  export type TruckPriceCreateNestedManyWithoutLoadInput = {
    create?: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput> | TruckPriceCreateWithoutLoadInput[] | TruckPriceUncheckedCreateWithoutLoadInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutLoadInput | TruckPriceCreateOrConnectWithoutLoadInput[]
    createMany?: TruckPriceCreateManyLoadInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type TruckPriceUncheckedCreateNestedManyWithoutLoadInput = {
    create?: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput> | TruckPriceCreateWithoutLoadInput[] | TruckPriceUncheckedCreateWithoutLoadInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutLoadInput | TruckPriceCreateOrConnectWithoutLoadInput[]
    createMany?: TruckPriceCreateManyLoadInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutOwnedLoadsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedLoadsInput, UserUncheckedCreateWithoutOwnedLoadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLoadsInput
    upsert?: UserUpsertWithoutOwnedLoadsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedLoadsInput, UserUpdateWithoutOwnedLoadsInput>, UserUncheckedUpdateWithoutOwnedLoadsInput>
  }

  export type TruckPriceUpdateManyWithoutLoadNestedInput = {
    create?: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput> | TruckPriceCreateWithoutLoadInput[] | TruckPriceUncheckedCreateWithoutLoadInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutLoadInput | TruckPriceCreateOrConnectWithoutLoadInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutLoadInput | TruckPriceUpsertWithWhereUniqueWithoutLoadInput[]
    createMany?: TruckPriceCreateManyLoadInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutLoadInput | TruckPriceUpdateWithWhereUniqueWithoutLoadInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutLoadInput | TruckPriceUpdateManyWithWhereWithoutLoadInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type TruckPriceUncheckedUpdateManyWithoutLoadNestedInput = {
    create?: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput> | TruckPriceCreateWithoutLoadInput[] | TruckPriceUncheckedCreateWithoutLoadInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutLoadInput | TruckPriceCreateOrConnectWithoutLoadInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutLoadInput | TruckPriceUpsertWithWhereUniqueWithoutLoadInput[]
    createMany?: TruckPriceCreateManyLoadInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutLoadInput | TruckPriceUpdateWithWhereUniqueWithoutLoadInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutLoadInput | TruckPriceUpdateManyWithWhereWithoutLoadInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type TrucksCreatefavLoadsInput = {
    set: string[]
  }

  export type TrucksCreatebookedLoadsInput = {
    set: InputJsonValue[]
  }

  export type UserCreateNestedOneWithoutOwnedTrucksInput = {
    create?: XOR<UserCreateWithoutOwnedTrucksInput, UserUncheckedCreateWithoutOwnedTrucksInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedTrucksInput
    connect?: UserWhereUniqueInput
  }

  export type TruckPriceCreateNestedManyWithoutTruckInput = {
    create?: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput> | TruckPriceCreateWithoutTruckInput[] | TruckPriceUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckInput | TruckPriceCreateOrConnectWithoutTruckInput[]
    createMany?: TruckPriceCreateManyTruckInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type TruckPriceUncheckedCreateNestedManyWithoutTruckInput = {
    create?: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput> | TruckPriceCreateWithoutTruckInput[] | TruckPriceUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckInput | TruckPriceCreateOrConnectWithoutTruckInput[]
    createMany?: TruckPriceCreateManyTruckInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type TrucksUpdatefavLoadsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TrucksUpdatebookedLoadsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type UserUpdateOneRequiredWithoutOwnedTrucksNestedInput = {
    create?: XOR<UserCreateWithoutOwnedTrucksInput, UserUncheckedCreateWithoutOwnedTrucksInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedTrucksInput
    upsert?: UserUpsertWithoutOwnedTrucksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedTrucksInput, UserUpdateWithoutOwnedTrucksInput>, UserUncheckedUpdateWithoutOwnedTrucksInput>
  }

  export type TruckPriceUpdateManyWithoutTruckNestedInput = {
    create?: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput> | TruckPriceCreateWithoutTruckInput[] | TruckPriceUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckInput | TruckPriceCreateOrConnectWithoutTruckInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutTruckInput | TruckPriceUpsertWithWhereUniqueWithoutTruckInput[]
    createMany?: TruckPriceCreateManyTruckInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutTruckInput | TruckPriceUpdateWithWhereUniqueWithoutTruckInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutTruckInput | TruckPriceUpdateManyWithWhereWithoutTruckInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type TruckPriceUncheckedUpdateManyWithoutTruckNestedInput = {
    create?: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput> | TruckPriceCreateWithoutTruckInput[] | TruckPriceUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckInput | TruckPriceCreateOrConnectWithoutTruckInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutTruckInput | TruckPriceUpsertWithWhereUniqueWithoutTruckInput[]
    createMany?: TruckPriceCreateManyTruckInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutTruckInput | TruckPriceUpdateWithWhereUniqueWithoutTruckInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutTruckInput | TruckPriceUpdateManyWithWhereWithoutTruckInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type LoadsCreateNestedOneWithoutTruckPricesInput = {
    create?: XOR<LoadsCreateWithoutTruckPricesInput, LoadsUncheckedCreateWithoutTruckPricesInput>
    connectOrCreate?: LoadsCreateOrConnectWithoutTruckPricesInput
    connect?: LoadsWhereUniqueInput
  }

  export type TrucksCreateNestedOneWithoutTruckPriceInput = {
    create?: XOR<TrucksCreateWithoutTruckPriceInput, TrucksUncheckedCreateWithoutTruckPriceInput>
    connectOrCreate?: TrucksCreateOrConnectWithoutTruckPriceInput
    connect?: TrucksWhereUniqueInput
  }

  export type LoadsUpdateOneRequiredWithoutTruckPricesNestedInput = {
    create?: XOR<LoadsCreateWithoutTruckPricesInput, LoadsUncheckedCreateWithoutTruckPricesInput>
    connectOrCreate?: LoadsCreateOrConnectWithoutTruckPricesInput
    upsert?: LoadsUpsertWithoutTruckPricesInput
    connect?: LoadsWhereUniqueInput
    update?: XOR<XOR<LoadsUpdateToOneWithWhereWithoutTruckPricesInput, LoadsUpdateWithoutTruckPricesInput>, LoadsUncheckedUpdateWithoutTruckPricesInput>
  }

  export type TrucksUpdateOneRequiredWithoutTruckPriceNestedInput = {
    create?: XOR<TrucksCreateWithoutTruckPriceInput, TrucksUncheckedCreateWithoutTruckPriceInput>
    connectOrCreate?: TrucksCreateOrConnectWithoutTruckPriceInput
    upsert?: TrucksUpsertWithoutTruckPriceInput
    connect?: TrucksWhereUniqueInput
    update?: XOR<XOR<TrucksUpdateToOneWithWhereWithoutTruckPriceInput, TrucksUpdateWithoutTruckPriceInput>, TrucksUncheckedUpdateWithoutTruckPriceInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LoadsCreateWithoutOwnerInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    truckPrices?: TruckPriceCreateNestedManyWithoutLoadInput
  }

  export type LoadsUncheckedCreateWithoutOwnerInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    truckPrices?: TruckPriceUncheckedCreateNestedManyWithoutLoadInput
  }

  export type LoadsCreateOrConnectWithoutOwnerInput = {
    where: LoadsWhereUniqueInput
    create: XOR<LoadsCreateWithoutOwnerInput, LoadsUncheckedCreateWithoutOwnerInput>
  }

  export type LoadsCreateManyOwnerInputEnvelope = {
    data: LoadsCreateManyOwnerInput | LoadsCreateManyOwnerInput[]
  }

  export type TrucksCreateWithoutOwnerInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TrucksCreatefavLoadsInput | string[]
    bookedLoads?: TrucksCreatebookedLoadsInput | InputJsonValue[]
    TruckPrice?: TruckPriceCreateNestedManyWithoutTruckInput
  }

  export type TrucksUncheckedCreateWithoutOwnerInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TrucksCreatefavLoadsInput | string[]
    bookedLoads?: TrucksCreatebookedLoadsInput | InputJsonValue[]
    TruckPrice?: TruckPriceUncheckedCreateNestedManyWithoutTruckInput
  }

  export type TrucksCreateOrConnectWithoutOwnerInput = {
    where: TrucksWhereUniqueInput
    create: XOR<TrucksCreateWithoutOwnerInput, TrucksUncheckedCreateWithoutOwnerInput>
  }

  export type TrucksCreateManyOwnerInputEnvelope = {
    data: TrucksCreateManyOwnerInput | TrucksCreateManyOwnerInput[]
  }

  export type LoadsUpsertWithWhereUniqueWithoutOwnerInput = {
    where: LoadsWhereUniqueInput
    update: XOR<LoadsUpdateWithoutOwnerInput, LoadsUncheckedUpdateWithoutOwnerInput>
    create: XOR<LoadsCreateWithoutOwnerInput, LoadsUncheckedCreateWithoutOwnerInput>
  }

  export type LoadsUpdateWithWhereUniqueWithoutOwnerInput = {
    where: LoadsWhereUniqueInput
    data: XOR<LoadsUpdateWithoutOwnerInput, LoadsUncheckedUpdateWithoutOwnerInput>
  }

  export type LoadsUpdateManyWithWhereWithoutOwnerInput = {
    where: LoadsScalarWhereInput
    data: XOR<LoadsUpdateManyMutationInput, LoadsUncheckedUpdateManyWithoutOwnerInput>
  }

  export type LoadsScalarWhereInput = {
    AND?: LoadsScalarWhereInput | LoadsScalarWhereInput[]
    OR?: LoadsScalarWhereInput[]
    NOT?: LoadsScalarWhereInput | LoadsScalarWhereInput[]
    id?: StringFilter<"Loads"> | string
    title?: StringFilter<"Loads"> | string
    description?: StringFilter<"Loads"> | string
    price?: IntFilter<"Loads"> | number
    fromAddress?: StringFilter<"Loads"> | string
    toAddress?: StringFilter<"Loads"> | string
    image?: StringFilter<"Loads"> | string
    userEmail?: StringFilter<"Loads"> | string
    createdAt?: DateTimeFilter<"Loads"> | Date | string
    updatedAt?: DateTimeFilter<"Loads"> | Date | string
  }

  export type TrucksUpsertWithWhereUniqueWithoutOwnerInput = {
    where: TrucksWhereUniqueInput
    update: XOR<TrucksUpdateWithoutOwnerInput, TrucksUncheckedUpdateWithoutOwnerInput>
    create: XOR<TrucksCreateWithoutOwnerInput, TrucksUncheckedCreateWithoutOwnerInput>
  }

  export type TrucksUpdateWithWhereUniqueWithoutOwnerInput = {
    where: TrucksWhereUniqueInput
    data: XOR<TrucksUpdateWithoutOwnerInput, TrucksUncheckedUpdateWithoutOwnerInput>
  }

  export type TrucksUpdateManyWithWhereWithoutOwnerInput = {
    where: TrucksScalarWhereInput
    data: XOR<TrucksUpdateManyMutationInput, TrucksUncheckedUpdateManyWithoutOwnerInput>
  }

  export type TrucksScalarWhereInput = {
    AND?: TrucksScalarWhereInput | TrucksScalarWhereInput[]
    OR?: TrucksScalarWhereInput[]
    NOT?: TrucksScalarWhereInput | TrucksScalarWhereInput[]
    id?: StringFilter<"Trucks"> | string
    driverName?: StringFilter<"Trucks"> | string
    truckEmail?: StringFilter<"Trucks"> | string
    license?: StringFilter<"Trucks"> | string
    truckCapacity?: IntFilter<"Trucks"> | number
    favLoads?: StringNullableListFilter<"Trucks">
    bookedLoads?: JsonNullableListFilter<"Trucks">
  }

  export type UserCreateWithoutOwnedLoadsInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedTrucks?: TrucksCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutOwnedLoadsInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedTrucks?: TrucksUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutOwnedLoadsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedLoadsInput, UserUncheckedCreateWithoutOwnedLoadsInput>
  }

  export type TruckPriceCreateWithoutLoadInput = {
    id?: string
    quotedPrice: number
    truck: TrucksCreateNestedOneWithoutTruckPriceInput
  }

  export type TruckPriceUncheckedCreateWithoutLoadInput = {
    id?: string
    truckId: string
    quotedPrice: number
  }

  export type TruckPriceCreateOrConnectWithoutLoadInput = {
    where: TruckPriceWhereUniqueInput
    create: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput>
  }

  export type TruckPriceCreateManyLoadInputEnvelope = {
    data: TruckPriceCreateManyLoadInput | TruckPriceCreateManyLoadInput[]
  }

  export type UserUpsertWithoutOwnedLoadsInput = {
    update: XOR<UserUpdateWithoutOwnedLoadsInput, UserUncheckedUpdateWithoutOwnedLoadsInput>
    create: XOR<UserCreateWithoutOwnedLoadsInput, UserUncheckedCreateWithoutOwnedLoadsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedLoadsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedLoadsInput, UserUncheckedUpdateWithoutOwnedLoadsInput>
  }

  export type UserUpdateWithoutOwnedLoadsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedTrucks?: TrucksUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedLoadsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedTrucks?: TrucksUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type TruckPriceUpsertWithWhereUniqueWithoutLoadInput = {
    where: TruckPriceWhereUniqueInput
    update: XOR<TruckPriceUpdateWithoutLoadInput, TruckPriceUncheckedUpdateWithoutLoadInput>
    create: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput>
  }

  export type TruckPriceUpdateWithWhereUniqueWithoutLoadInput = {
    where: TruckPriceWhereUniqueInput
    data: XOR<TruckPriceUpdateWithoutLoadInput, TruckPriceUncheckedUpdateWithoutLoadInput>
  }

  export type TruckPriceUpdateManyWithWhereWithoutLoadInput = {
    where: TruckPriceScalarWhereInput
    data: XOR<TruckPriceUpdateManyMutationInput, TruckPriceUncheckedUpdateManyWithoutLoadInput>
  }

  export type TruckPriceScalarWhereInput = {
    AND?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
    OR?: TruckPriceScalarWhereInput[]
    NOT?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
    id?: StringFilter<"TruckPrice"> | string
    loadId?: StringFilter<"TruckPrice"> | string
    truckId?: StringFilter<"TruckPrice"> | string
    quotedPrice?: IntFilter<"TruckPrice"> | number
  }

  export type UserCreateWithoutOwnedTrucksInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadsCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutOwnedTrucksInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadsUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutOwnedTrucksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedTrucksInput, UserUncheckedCreateWithoutOwnedTrucksInput>
  }

  export type TruckPriceCreateWithoutTruckInput = {
    id?: string
    quotedPrice: number
    load: LoadsCreateNestedOneWithoutTruckPricesInput
  }

  export type TruckPriceUncheckedCreateWithoutTruckInput = {
    id?: string
    loadId: string
    quotedPrice: number
  }

  export type TruckPriceCreateOrConnectWithoutTruckInput = {
    where: TruckPriceWhereUniqueInput
    create: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput>
  }

  export type TruckPriceCreateManyTruckInputEnvelope = {
    data: TruckPriceCreateManyTruckInput | TruckPriceCreateManyTruckInput[]
  }

  export type UserUpsertWithoutOwnedTrucksInput = {
    update: XOR<UserUpdateWithoutOwnedTrucksInput, UserUncheckedUpdateWithoutOwnedTrucksInput>
    create: XOR<UserCreateWithoutOwnedTrucksInput, UserUncheckedCreateWithoutOwnedTrucksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedTrucksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedTrucksInput, UserUncheckedUpdateWithoutOwnedTrucksInput>
  }

  export type UserUpdateWithoutOwnedTrucksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadsUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedTrucksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadsUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type TruckPriceUpsertWithWhereUniqueWithoutTruckInput = {
    where: TruckPriceWhereUniqueInput
    update: XOR<TruckPriceUpdateWithoutTruckInput, TruckPriceUncheckedUpdateWithoutTruckInput>
    create: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput>
  }

  export type TruckPriceUpdateWithWhereUniqueWithoutTruckInput = {
    where: TruckPriceWhereUniqueInput
    data: XOR<TruckPriceUpdateWithoutTruckInput, TruckPriceUncheckedUpdateWithoutTruckInput>
  }

  export type TruckPriceUpdateManyWithWhereWithoutTruckInput = {
    where: TruckPriceScalarWhereInput
    data: XOR<TruckPriceUpdateManyMutationInput, TruckPriceUncheckedUpdateManyWithoutTruckInput>
  }

  export type LoadsCreateWithoutTruckPricesInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedLoadsInput
  }

  export type LoadsUncheckedCreateWithoutTruckPricesInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoadsCreateOrConnectWithoutTruckPricesInput = {
    where: LoadsWhereUniqueInput
    create: XOR<LoadsCreateWithoutTruckPricesInput, LoadsUncheckedCreateWithoutTruckPricesInput>
  }

  export type TrucksCreateWithoutTruckPriceInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TrucksCreatefavLoadsInput | string[]
    bookedLoads?: TrucksCreatebookedLoadsInput | InputJsonValue[]
    owner: UserCreateNestedOneWithoutOwnedTrucksInput
  }

  export type TrucksUncheckedCreateWithoutTruckPriceInput = {
    id?: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads?: TrucksCreatefavLoadsInput | string[]
    bookedLoads?: TrucksCreatebookedLoadsInput | InputJsonValue[]
  }

  export type TrucksCreateOrConnectWithoutTruckPriceInput = {
    where: TrucksWhereUniqueInput
    create: XOR<TrucksCreateWithoutTruckPriceInput, TrucksUncheckedCreateWithoutTruckPriceInput>
  }

  export type LoadsUpsertWithoutTruckPricesInput = {
    update: XOR<LoadsUpdateWithoutTruckPricesInput, LoadsUncheckedUpdateWithoutTruckPricesInput>
    create: XOR<LoadsCreateWithoutTruckPricesInput, LoadsUncheckedCreateWithoutTruckPricesInput>
    where?: LoadsWhereInput
  }

  export type LoadsUpdateToOneWithWhereWithoutTruckPricesInput = {
    where?: LoadsWhereInput
    data: XOR<LoadsUpdateWithoutTruckPricesInput, LoadsUncheckedUpdateWithoutTruckPricesInput>
  }

  export type LoadsUpdateWithoutTruckPricesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedLoadsNestedInput
  }

  export type LoadsUncheckedUpdateWithoutTruckPricesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrucksUpsertWithoutTruckPriceInput = {
    update: XOR<TrucksUpdateWithoutTruckPriceInput, TrucksUncheckedUpdateWithoutTruckPriceInput>
    create: XOR<TrucksCreateWithoutTruckPriceInput, TrucksUncheckedCreateWithoutTruckPriceInput>
    where?: TrucksWhereInput
  }

  export type TrucksUpdateToOneWithWhereWithoutTruckPriceInput = {
    where?: TrucksWhereInput
    data: XOR<TrucksUpdateWithoutTruckPriceInput, TrucksUncheckedUpdateWithoutTruckPriceInput>
  }

  export type TrucksUpdateWithoutTruckPriceInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
    owner?: UserUpdateOneRequiredWithoutOwnedTrucksNestedInput
  }

  export type TrucksUncheckedUpdateWithoutTruckPriceInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    truckEmail?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
  }

  export type LoadsCreateManyOwnerInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrucksCreateManyOwnerInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TrucksCreatefavLoadsInput | string[]
    bookedLoads?: TrucksCreatebookedLoadsInput | InputJsonValue[]
  }

  export type LoadsUpdateWithoutOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckPrices?: TruckPriceUpdateManyWithoutLoadNestedInput
  }

  export type LoadsUncheckedUpdateWithoutOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckPrices?: TruckPriceUncheckedUpdateManyWithoutLoadNestedInput
  }

  export type LoadsUncheckedUpdateManyWithoutOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrucksUpdateWithoutOwnerInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
    TruckPrice?: TruckPriceUpdateManyWithoutTruckNestedInput
  }

  export type TrucksUncheckedUpdateWithoutOwnerInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
    TruckPrice?: TruckPriceUncheckedUpdateManyWithoutTruckNestedInput
  }

  export type TrucksUncheckedUpdateManyWithoutOwnerInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TrucksUpdatefavLoadsInput | string[]
    bookedLoads?: TrucksUpdatebookedLoadsInput | InputJsonValue[]
  }

  export type TruckPriceCreateManyLoadInput = {
    id?: string
    truckId: string
    quotedPrice: number
  }

  export type TruckPriceUpdateWithoutLoadInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
    truck?: TrucksUpdateOneRequiredWithoutTruckPriceNestedInput
  }

  export type TruckPriceUncheckedUpdateWithoutLoadInput = {
    truckId?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceUncheckedUpdateManyWithoutLoadInput = {
    truckId?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceCreateManyTruckInput = {
    id?: string
    loadId: string
    quotedPrice: number
  }

  export type TruckPriceUpdateWithoutTruckInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
    load?: LoadsUpdateOneRequiredWithoutTruckPricesNestedInput
  }

  export type TruckPriceUncheckedUpdateWithoutTruckInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceUncheckedUpdateManyWithoutTruckInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoadsCountOutputTypeDefaultArgs instead
     */
    export type LoadsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoadsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrucksCountOutputTypeDefaultArgs instead
     */
    export type TrucksCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrucksCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoadsDefaultArgs instead
     */
    export type LoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoadsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrucksDefaultArgs instead
     */
    export type TrucksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrucksDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TruckPriceDefaultArgs instead
     */
    export type TruckPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TruckPriceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}