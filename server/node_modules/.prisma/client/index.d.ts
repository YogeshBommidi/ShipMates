
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Load
 * 
 */
export type Load = $Result.DefaultSelection<Prisma.$LoadPayload>
/**
 * Model Truck
 * 
 */
export type Truck = $Result.DefaultSelection<Prisma.$TruckPayload>
/**
 * Model TruckPrice
 * 
 */
export type TruckPrice = $Result.DefaultSelection<Prisma.$TruckPricePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.load`: Exposes CRUD operations for the **Load** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Loads
    * const loads = await prisma.load.findMany()
    * ```
    */
  get load(): Prisma.LoadDelegate<ExtArgs>;

  /**
   * `prisma.truck`: Exposes CRUD operations for the **Truck** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trucks
    * const trucks = await prisma.truck.findMany()
    * ```
    */
  get truck(): Prisma.TruckDelegate<ExtArgs>;

  /**
   * `prisma.truckPrice`: Exposes CRUD operations for the **TruckPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TruckPrices
    * const truckPrices = await prisma.truckPrice.findMany()
    * ```
    */
  get truckPrice(): Prisma.TruckPriceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Load: 'Load',
    Truck: 'Truck',
    TruckPrice: 'TruckPrice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'load' | 'truck' | 'truckPrice'
      txIsolationLevel: never
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Load: {
        payload: Prisma.$LoadPayload<ExtArgs>
        fields: Prisma.LoadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoadFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoadFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          findFirst: {
            args: Prisma.LoadFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoadFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          findMany: {
            args: Prisma.LoadFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>[]
          }
          create: {
            args: Prisma.LoadCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          createMany: {
            args: Prisma.LoadCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LoadDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          update: {
            args: Prisma.LoadUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          deleteMany: {
            args: Prisma.LoadDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LoadUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LoadUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          aggregate: {
            args: Prisma.LoadAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLoad>
          }
          groupBy: {
            args: Prisma.LoadGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LoadGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LoadFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.LoadAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.LoadCountArgs<ExtArgs>,
            result: $Utils.Optional<LoadCountAggregateOutputType> | number
          }
        }
      }
      Truck: {
        payload: Prisma.$TruckPayload<ExtArgs>
        fields: Prisma.TruckFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TruckFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TruckFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload>
          }
          findFirst: {
            args: Prisma.TruckFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TruckFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload>
          }
          findMany: {
            args: Prisma.TruckFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload>[]
          }
          create: {
            args: Prisma.TruckCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload>
          }
          createMany: {
            args: Prisma.TruckCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TruckDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload>
          }
          update: {
            args: Prisma.TruckUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload>
          }
          deleteMany: {
            args: Prisma.TruckDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TruckUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TruckUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPayload>
          }
          aggregate: {
            args: Prisma.TruckAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTruck>
          }
          groupBy: {
            args: Prisma.TruckGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TruckGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TruckFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.TruckAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.TruckCountArgs<ExtArgs>,
            result: $Utils.Optional<TruckCountAggregateOutputType> | number
          }
        }
      }
      TruckPrice: {
        payload: Prisma.$TruckPricePayload<ExtArgs>
        fields: Prisma.TruckPriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TruckPriceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TruckPriceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          findFirst: {
            args: Prisma.TruckPriceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TruckPriceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          findMany: {
            args: Prisma.TruckPriceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>[]
          }
          create: {
            args: Prisma.TruckPriceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          createMany: {
            args: Prisma.TruckPriceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TruckPriceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          update: {
            args: Prisma.TruckPriceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          deleteMany: {
            args: Prisma.TruckPriceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TruckPriceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TruckPriceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TruckPricePayload>
          }
          aggregate: {
            args: Prisma.TruckPriceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTruckPrice>
          }
          groupBy: {
            args: Prisma.TruckPriceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TruckPriceGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TruckPriceFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.TruckPriceAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.TruckPriceCountArgs<ExtArgs>,
            result: $Utils.Optional<TruckPriceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    ownedLoads: number
    ownedTrucks: number
    truckPrice: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedLoads?: boolean | UserCountOutputTypeCountOwnedLoadsArgs
    ownedTrucks?: boolean | UserCountOutputTypeCountOwnedTrucksArgs
    truckPrice?: boolean | UserCountOutputTypeCountTruckPriceArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedTrucksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTruckPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckPriceWhereInput
  }


  /**
   * Count Type LoadCountOutputType
   */

  export type LoadCountOutputType = {
    truckPrices: number
  }

  export type LoadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    truckPrices?: boolean | LoadCountOutputTypeCountTruckPricesArgs
  }

  // Custom InputTypes
  /**
   * LoadCountOutputType without action
   */
  export type LoadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadCountOutputType
     */
    select?: LoadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LoadCountOutputType without action
   */
  export type LoadCountOutputTypeCountTruckPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckPriceWhereInput
  }


  /**
   * Count Type TruckCountOutputType
   */

  export type TruckCountOutputType = {
    loads: number
    truckPrice: number
  }

  export type TruckCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loads?: boolean | TruckCountOutputTypeCountLoadsArgs
    truckPrice?: boolean | TruckCountOutputTypeCountTruckPriceArgs
  }

  // Custom InputTypes
  /**
   * TruckCountOutputType without action
   */
  export type TruckCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCountOutputType
     */
    select?: TruckCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TruckCountOutputType without action
   */
  export type TruckCountOutputTypeCountLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadWhereInput
  }

  /**
   * TruckCountOutputType without action
   */
  export type TruckCountOutputTypeCountTruckPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckPriceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    image?: boolean
    ownedLoads?: boolean | User$ownedLoadsArgs<ExtArgs>
    ownedTrucks?: boolean | User$ownedTrucksArgs<ExtArgs>
    truckPrice?: boolean | User$truckPriceArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    image?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedLoads?: boolean | User$ownedLoadsArgs<ExtArgs>
    ownedTrucks?: boolean | User$ownedTrucksArgs<ExtArgs>
    truckPrice?: boolean | User$truckPriceArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      ownedLoads: Prisma.$LoadPayload<ExtArgs>[]
      ownedTrucks: Prisma.$TruckPayload<ExtArgs>[]
      truckPrice: Prisma.$TruckPricePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ownedLoads<T extends User$ownedLoadsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedLoadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'findMany'> | Null>;

    ownedTrucks<T extends User$ownedTrucksArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedTrucksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'findMany'> | Null>;

    truckPrice<T extends User$truckPriceArgs<ExtArgs> = {}>(args?: Subset<T, User$truckPriceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.ownedLoads
   */
  export type User$ownedLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    where?: LoadWhereInput
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    cursor?: LoadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoadScalarFieldEnum | LoadScalarFieldEnum[]
  }

  /**
   * User.ownedTrucks
   */
  export type User$ownedTrucksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    where?: TruckWhereInput
    orderBy?: TruckOrderByWithRelationInput | TruckOrderByWithRelationInput[]
    cursor?: TruckWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TruckScalarFieldEnum | TruckScalarFieldEnum[]
  }

  /**
   * User.truckPrice
   */
  export type User$truckPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    where?: TruckPriceWhereInput
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    cursor?: TruckPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Load
   */

  export type AggregateLoad = {
    _count: LoadCountAggregateOutputType | null
    _avg: LoadAvgAggregateOutputType | null
    _sum: LoadSumAggregateOutputType | null
    _min: LoadMinAggregateOutputType | null
    _max: LoadMaxAggregateOutputType | null
  }

  export type LoadAvgAggregateOutputType = {
    price: number | null
  }

  export type LoadSumAggregateOutputType = {
    price: number | null
  }

  export type LoadMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    price: number | null
    fromAddress: string | null
    toAddress: string | null
    image: string | null
    userEmail: string | null
    isBooked: boolean | null
    truckId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LoadMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    price: number | null
    fromAddress: string | null
    toAddress: string | null
    image: string | null
    userEmail: string | null
    isBooked: boolean | null
    truckId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LoadCountAggregateOutputType = {
    id: number
    title: number
    description: number
    price: number
    fromAddress: number
    toAddress: number
    image: number
    userEmail: number
    isBooked: number
    truckId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LoadAvgAggregateInputType = {
    price?: true
  }

  export type LoadSumAggregateInputType = {
    price?: true
  }

  export type LoadMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    fromAddress?: true
    toAddress?: true
    image?: true
    userEmail?: true
    isBooked?: true
    truckId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LoadMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    fromAddress?: true
    toAddress?: true
    image?: true
    userEmail?: true
    isBooked?: true
    truckId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LoadCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    fromAddress?: true
    toAddress?: true
    image?: true
    userEmail?: true
    isBooked?: true
    truckId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LoadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Load to aggregate.
     */
    where?: LoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Loads
    **/
    _count?: true | LoadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoadMaxAggregateInputType
  }

  export type GetLoadAggregateType<T extends LoadAggregateArgs> = {
        [P in keyof T & keyof AggregateLoad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoad[P]>
      : GetScalarType<T[P], AggregateLoad[P]>
  }




  export type LoadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadWhereInput
    orderBy?: LoadOrderByWithAggregationInput | LoadOrderByWithAggregationInput[]
    by: LoadScalarFieldEnum[] | LoadScalarFieldEnum
    having?: LoadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoadCountAggregateInputType | true
    _avg?: LoadAvgAggregateInputType
    _sum?: LoadSumAggregateInputType
    _min?: LoadMinAggregateInputType
    _max?: LoadMaxAggregateInputType
  }

  export type LoadGroupByOutputType = {
    id: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    isBooked: boolean
    truckId: string | null
    createdAt: Date
    updatedAt: Date
    _count: LoadCountAggregateOutputType | null
    _avg: LoadAvgAggregateOutputType | null
    _sum: LoadSumAggregateOutputType | null
    _min: LoadMinAggregateOutputType | null
    _max: LoadMaxAggregateOutputType | null
  }

  type GetLoadGroupByPayload<T extends LoadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoadGroupByOutputType[P]>
            : GetScalarType<T[P], LoadGroupByOutputType[P]>
        }
      >
    >


  export type LoadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    image?: boolean
    userEmail?: boolean
    isBooked?: boolean
    truckId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loadOwner?: boolean | UserDefaultArgs<ExtArgs>
    truckPrices?: boolean | Load$truckPricesArgs<ExtArgs>
    truck?: boolean | Load$truckArgs<ExtArgs>
    _count?: boolean | LoadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["load"]>

  export type LoadSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    image?: boolean
    userEmail?: boolean
    isBooked?: boolean
    truckId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type LoadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loadOwner?: boolean | UserDefaultArgs<ExtArgs>
    truckPrices?: boolean | Load$truckPricesArgs<ExtArgs>
    truck?: boolean | Load$truckArgs<ExtArgs>
    _count?: boolean | LoadCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LoadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Load"
    objects: {
      loadOwner: Prisma.$UserPayload<ExtArgs>
      truckPrices: Prisma.$TruckPricePayload<ExtArgs>[]
      truck: Prisma.$TruckPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      price: number
      fromAddress: string
      toAddress: string
      image: string
      userEmail: string
      isBooked: boolean
      truckId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["load"]>
    composites: {}
  }


  type LoadGetPayload<S extends boolean | null | undefined | LoadDefaultArgs> = $Result.GetResult<Prisma.$LoadPayload, S>

  type LoadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LoadCountAggregateInputType | true
    }

  export interface LoadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Load'], meta: { name: 'Load' } }
    /**
     * Find zero or one Load that matches the filter.
     * @param {LoadFindUniqueArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoadFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LoadFindUniqueArgs<ExtArgs>>
    ): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Load that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LoadFindUniqueOrThrowArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoadFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Load that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadFindFirstArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoadFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadFindFirstArgs<ExtArgs>>
    ): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Load that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadFindFirstOrThrowArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoadFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Loads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Loads
     * const loads = await prisma.load.findMany()
     * 
     * // Get first 10 Loads
     * const loads = await prisma.load.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loadWithIdOnly = await prisma.load.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoadFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Load.
     * @param {LoadCreateArgs} args - Arguments to create a Load.
     * @example
     * // Create one Load
     * const Load = await prisma.load.create({
     *   data: {
     *     // ... data to create a Load
     *   }
     * })
     * 
    **/
    create<T extends LoadCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LoadCreateArgs<ExtArgs>>
    ): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Loads.
     * @param {LoadCreateManyArgs} args - Arguments to create many Loads.
     * @example
     * // Create many Loads
     * const load = await prisma.load.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends LoadCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Load.
     * @param {LoadDeleteArgs} args - Arguments to delete one Load.
     * @example
     * // Delete one Load
     * const Load = await prisma.load.delete({
     *   where: {
     *     // ... filter to delete one Load
     *   }
     * })
     * 
    **/
    delete<T extends LoadDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LoadDeleteArgs<ExtArgs>>
    ): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Load.
     * @param {LoadUpdateArgs} args - Arguments to update one Load.
     * @example
     * // Update one Load
     * const load = await prisma.load.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoadUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LoadUpdateArgs<ExtArgs>>
    ): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Loads.
     * @param {LoadDeleteManyArgs} args - Arguments to filter Loads to delete.
     * @example
     * // Delete a few Loads
     * const { count } = await prisma.load.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoadDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Loads
     * const load = await prisma.load.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoadUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LoadUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Load.
     * @param {LoadUpsertArgs} args - Arguments to update or create a Load.
     * @example
     * // Update or create a Load
     * const load = await prisma.load.upsert({
     *   create: {
     *     // ... data to create a Load
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Load we want to update
     *   }
     * })
    **/
    upsert<T extends LoadUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LoadUpsertArgs<ExtArgs>>
    ): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Loads that matches the filter.
     * @param {LoadFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const load = await prisma.load.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LoadFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Load.
     * @param {LoadAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const load = await prisma.load.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LoadAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Loads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadCountArgs} args - Arguments to filter Loads to count.
     * @example
     * // Count the number of Loads
     * const count = await prisma.load.count({
     *   where: {
     *     // ... the filter for the Loads we want to count
     *   }
     * })
    **/
    count<T extends LoadCountArgs>(
      args?: Subset<T, LoadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Load.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoadAggregateArgs>(args: Subset<T, LoadAggregateArgs>): Prisma.PrismaPromise<GetLoadAggregateType<T>>

    /**
     * Group by Load.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoadGroupByArgs['orderBy'] }
        : { orderBy?: LoadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Load model
   */
  readonly fields: LoadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Load.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    loadOwner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    truckPrices<T extends Load$truckPricesArgs<ExtArgs> = {}>(args?: Subset<T, Load$truckPricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findMany'> | Null>;

    truck<T extends Load$truckArgs<ExtArgs> = {}>(args?: Subset<T, Load$truckArgs<ExtArgs>>): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Load model
   */ 
  interface LoadFieldRefs {
    readonly id: FieldRef<"Load", 'String'>
    readonly title: FieldRef<"Load", 'String'>
    readonly description: FieldRef<"Load", 'String'>
    readonly price: FieldRef<"Load", 'Int'>
    readonly fromAddress: FieldRef<"Load", 'String'>
    readonly toAddress: FieldRef<"Load", 'String'>
    readonly image: FieldRef<"Load", 'String'>
    readonly userEmail: FieldRef<"Load", 'String'>
    readonly isBooked: FieldRef<"Load", 'Boolean'>
    readonly truckId: FieldRef<"Load", 'String'>
    readonly createdAt: FieldRef<"Load", 'DateTime'>
    readonly updatedAt: FieldRef<"Load", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Load findUnique
   */
  export type LoadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * Filter, which Load to fetch.
     */
    where: LoadWhereUniqueInput
  }

  /**
   * Load findUniqueOrThrow
   */
  export type LoadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * Filter, which Load to fetch.
     */
    where: LoadWhereUniqueInput
  }

  /**
   * Load findFirst
   */
  export type LoadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * Filter, which Load to fetch.
     */
    where?: LoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loads.
     */
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loads.
     */
    distinct?: LoadScalarFieldEnum | LoadScalarFieldEnum[]
  }

  /**
   * Load findFirstOrThrow
   */
  export type LoadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * Filter, which Load to fetch.
     */
    where?: LoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loads.
     */
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loads.
     */
    distinct?: LoadScalarFieldEnum | LoadScalarFieldEnum[]
  }

  /**
   * Load findMany
   */
  export type LoadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * Filter, which Loads to fetch.
     */
    where?: LoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Loads.
     */
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    distinct?: LoadScalarFieldEnum | LoadScalarFieldEnum[]
  }

  /**
   * Load create
   */
  export type LoadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * The data needed to create a Load.
     */
    data: XOR<LoadCreateInput, LoadUncheckedCreateInput>
  }

  /**
   * Load createMany
   */
  export type LoadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Loads.
     */
    data: LoadCreateManyInput | LoadCreateManyInput[]
  }

  /**
   * Load update
   */
  export type LoadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * The data needed to update a Load.
     */
    data: XOR<LoadUpdateInput, LoadUncheckedUpdateInput>
    /**
     * Choose, which Load to update.
     */
    where: LoadWhereUniqueInput
  }

  /**
   * Load updateMany
   */
  export type LoadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Loads.
     */
    data: XOR<LoadUpdateManyMutationInput, LoadUncheckedUpdateManyInput>
    /**
     * Filter which Loads to update
     */
    where?: LoadWhereInput
  }

  /**
   * Load upsert
   */
  export type LoadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * The filter to search for the Load to update in case it exists.
     */
    where: LoadWhereUniqueInput
    /**
     * In case the Load found by the `where` argument doesn't exist, create a new Load with this data.
     */
    create: XOR<LoadCreateInput, LoadUncheckedCreateInput>
    /**
     * In case the Load was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoadUpdateInput, LoadUncheckedUpdateInput>
  }

  /**
   * Load delete
   */
  export type LoadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    /**
     * Filter which Load to delete.
     */
    where: LoadWhereUniqueInput
  }

  /**
   * Load deleteMany
   */
  export type LoadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loads to delete
     */
    where?: LoadWhereInput
  }

  /**
   * Load findRaw
   */
  export type LoadFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Load aggregateRaw
   */
  export type LoadAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Load.truckPrices
   */
  export type Load$truckPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    where?: TruckPriceWhereInput
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    cursor?: TruckPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * Load.truck
   */
  export type Load$truckArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    where?: TruckWhereInput
  }

  /**
   * Load without action
   */
  export type LoadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
  }


  /**
   * Model Truck
   */

  export type AggregateTruck = {
    _count: TruckCountAggregateOutputType | null
    _avg: TruckAvgAggregateOutputType | null
    _sum: TruckSumAggregateOutputType | null
    _min: TruckMinAggregateOutputType | null
    _max: TruckMaxAggregateOutputType | null
  }

  export type TruckAvgAggregateOutputType = {
    truckCapacity: number | null
  }

  export type TruckSumAggregateOutputType = {
    truckCapacity: number | null
  }

  export type TruckMinAggregateOutputType = {
    id: string | null
    driverName: string | null
    truckEmail: string | null
    license: string | null
    truckCapacity: number | null
  }

  export type TruckMaxAggregateOutputType = {
    id: string | null
    driverName: string | null
    truckEmail: string | null
    license: string | null
    truckCapacity: number | null
  }

  export type TruckCountAggregateOutputType = {
    id: number
    driverName: number
    truckEmail: number
    license: number
    truckCapacity: number
    favLoads: number
    bookedLoads: number
    _all: number
  }


  export type TruckAvgAggregateInputType = {
    truckCapacity?: true
  }

  export type TruckSumAggregateInputType = {
    truckCapacity?: true
  }

  export type TruckMinAggregateInputType = {
    id?: true
    driverName?: true
    truckEmail?: true
    license?: true
    truckCapacity?: true
  }

  export type TruckMaxAggregateInputType = {
    id?: true
    driverName?: true
    truckEmail?: true
    license?: true
    truckCapacity?: true
  }

  export type TruckCountAggregateInputType = {
    id?: true
    driverName?: true
    truckEmail?: true
    license?: true
    truckCapacity?: true
    favLoads?: true
    bookedLoads?: true
    _all?: true
  }

  export type TruckAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Truck to aggregate.
     */
    where?: TruckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trucks to fetch.
     */
    orderBy?: TruckOrderByWithRelationInput | TruckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TruckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trucks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trucks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trucks
    **/
    _count?: true | TruckCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TruckAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TruckSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TruckMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TruckMaxAggregateInputType
  }

  export type GetTruckAggregateType<T extends TruckAggregateArgs> = {
        [P in keyof T & keyof AggregateTruck]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTruck[P]>
      : GetScalarType<T[P], AggregateTruck[P]>
  }




  export type TruckGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckWhereInput
    orderBy?: TruckOrderByWithAggregationInput | TruckOrderByWithAggregationInput[]
    by: TruckScalarFieldEnum[] | TruckScalarFieldEnum
    having?: TruckScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TruckCountAggregateInputType | true
    _avg?: TruckAvgAggregateInputType
    _sum?: TruckSumAggregateInputType
    _min?: TruckMinAggregateInputType
    _max?: TruckMaxAggregateInputType
  }

  export type TruckGroupByOutputType = {
    id: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads: string[]
    bookedLoads: JsonValue[]
    _count: TruckCountAggregateOutputType | null
    _avg: TruckAvgAggregateOutputType | null
    _sum: TruckSumAggregateOutputType | null
    _min: TruckMinAggregateOutputType | null
    _max: TruckMaxAggregateOutputType | null
  }

  type GetTruckGroupByPayload<T extends TruckGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TruckGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TruckGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TruckGroupByOutputType[P]>
            : GetScalarType<T[P], TruckGroupByOutputType[P]>
        }
      >
    >


  export type TruckSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    driverName?: boolean
    truckEmail?: boolean
    license?: boolean
    truckCapacity?: boolean
    favLoads?: boolean
    bookedLoads?: boolean
    truckOwner?: boolean | UserDefaultArgs<ExtArgs>
    loads?: boolean | Truck$loadsArgs<ExtArgs>
    truckPrice?: boolean | Truck$truckPriceArgs<ExtArgs>
    _count?: boolean | TruckCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["truck"]>

  export type TruckSelectScalar = {
    id?: boolean
    driverName?: boolean
    truckEmail?: boolean
    license?: boolean
    truckCapacity?: boolean
    favLoads?: boolean
    bookedLoads?: boolean
  }


  export type TruckInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    truckOwner?: boolean | UserDefaultArgs<ExtArgs>
    loads?: boolean | Truck$loadsArgs<ExtArgs>
    truckPrice?: boolean | Truck$truckPriceArgs<ExtArgs>
    _count?: boolean | TruckCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TruckPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Truck"
    objects: {
      truckOwner: Prisma.$UserPayload<ExtArgs>
      loads: Prisma.$LoadPayload<ExtArgs>[]
      truckPrice: Prisma.$TruckPricePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      driverName: string
      truckEmail: string
      license: string
      truckCapacity: number
      favLoads: string[]
      bookedLoads: Prisma.JsonValue[]
    }, ExtArgs["result"]["truck"]>
    composites: {}
  }


  type TruckGetPayload<S extends boolean | null | undefined | TruckDefaultArgs> = $Result.GetResult<Prisma.$TruckPayload, S>

  type TruckCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TruckFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TruckCountAggregateInputType | true
    }

  export interface TruckDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Truck'], meta: { name: 'Truck' } }
    /**
     * Find zero or one Truck that matches the filter.
     * @param {TruckFindUniqueArgs} args - Arguments to find a Truck
     * @example
     * // Get one Truck
     * const truck = await prisma.truck.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TruckFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TruckFindUniqueArgs<ExtArgs>>
    ): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Truck that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TruckFindUniqueOrThrowArgs} args - Arguments to find a Truck
     * @example
     * // Get one Truck
     * const truck = await prisma.truck.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TruckFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Truck that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckFindFirstArgs} args - Arguments to find a Truck
     * @example
     * // Get one Truck
     * const truck = await prisma.truck.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TruckFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckFindFirstArgs<ExtArgs>>
    ): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Truck that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckFindFirstOrThrowArgs} args - Arguments to find a Truck
     * @example
     * // Get one Truck
     * const truck = await prisma.truck.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TruckFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Trucks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trucks
     * const trucks = await prisma.truck.findMany()
     * 
     * // Get first 10 Trucks
     * const trucks = await prisma.truck.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const truckWithIdOnly = await prisma.truck.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TruckFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Truck.
     * @param {TruckCreateArgs} args - Arguments to create a Truck.
     * @example
     * // Create one Truck
     * const Truck = await prisma.truck.create({
     *   data: {
     *     // ... data to create a Truck
     *   }
     * })
     * 
    **/
    create<T extends TruckCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TruckCreateArgs<ExtArgs>>
    ): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Trucks.
     * @param {TruckCreateManyArgs} args - Arguments to create many Trucks.
     * @example
     * // Create many Trucks
     * const truck = await prisma.truck.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TruckCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Truck.
     * @param {TruckDeleteArgs} args - Arguments to delete one Truck.
     * @example
     * // Delete one Truck
     * const Truck = await prisma.truck.delete({
     *   where: {
     *     // ... filter to delete one Truck
     *   }
     * })
     * 
    **/
    delete<T extends TruckDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TruckDeleteArgs<ExtArgs>>
    ): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Truck.
     * @param {TruckUpdateArgs} args - Arguments to update one Truck.
     * @example
     * // Update one Truck
     * const truck = await prisma.truck.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TruckUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TruckUpdateArgs<ExtArgs>>
    ): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Trucks.
     * @param {TruckDeleteManyArgs} args - Arguments to filter Trucks to delete.
     * @example
     * // Delete a few Trucks
     * const { count } = await prisma.truck.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TruckDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trucks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trucks
     * const truck = await prisma.truck.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TruckUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TruckUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Truck.
     * @param {TruckUpsertArgs} args - Arguments to update or create a Truck.
     * @example
     * // Update or create a Truck
     * const truck = await prisma.truck.upsert({
     *   create: {
     *     // ... data to create a Truck
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Truck we want to update
     *   }
     * })
    **/
    upsert<T extends TruckUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TruckUpsertArgs<ExtArgs>>
    ): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Trucks that matches the filter.
     * @param {TruckFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const truck = await prisma.truck.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TruckFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Truck.
     * @param {TruckAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const truck = await prisma.truck.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TruckAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Trucks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckCountArgs} args - Arguments to filter Trucks to count.
     * @example
     * // Count the number of Trucks
     * const count = await prisma.truck.count({
     *   where: {
     *     // ... the filter for the Trucks we want to count
     *   }
     * })
    **/
    count<T extends TruckCountArgs>(
      args?: Subset<T, TruckCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TruckCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Truck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TruckAggregateArgs>(args: Subset<T, TruckAggregateArgs>): Prisma.PrismaPromise<GetTruckAggregateType<T>>

    /**
     * Group by Truck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TruckGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TruckGroupByArgs['orderBy'] }
        : { orderBy?: TruckGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TruckGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTruckGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Truck model
   */
  readonly fields: TruckFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Truck.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TruckClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    truckOwner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    loads<T extends Truck$loadsArgs<ExtArgs> = {}>(args?: Subset<T, Truck$loadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'findMany'> | Null>;

    truckPrice<T extends Truck$truckPriceArgs<ExtArgs> = {}>(args?: Subset<T, Truck$truckPriceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Truck model
   */ 
  interface TruckFieldRefs {
    readonly id: FieldRef<"Truck", 'String'>
    readonly driverName: FieldRef<"Truck", 'String'>
    readonly truckEmail: FieldRef<"Truck", 'String'>
    readonly license: FieldRef<"Truck", 'String'>
    readonly truckCapacity: FieldRef<"Truck", 'Int'>
    readonly favLoads: FieldRef<"Truck", 'String[]'>
    readonly bookedLoads: FieldRef<"Truck", 'Json[]'>
  }
    

  // Custom InputTypes
  /**
   * Truck findUnique
   */
  export type TruckFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * Filter, which Truck to fetch.
     */
    where: TruckWhereUniqueInput
  }

  /**
   * Truck findUniqueOrThrow
   */
  export type TruckFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * Filter, which Truck to fetch.
     */
    where: TruckWhereUniqueInput
  }

  /**
   * Truck findFirst
   */
  export type TruckFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * Filter, which Truck to fetch.
     */
    where?: TruckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trucks to fetch.
     */
    orderBy?: TruckOrderByWithRelationInput | TruckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trucks.
     */
    cursor?: TruckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trucks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trucks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trucks.
     */
    distinct?: TruckScalarFieldEnum | TruckScalarFieldEnum[]
  }

  /**
   * Truck findFirstOrThrow
   */
  export type TruckFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * Filter, which Truck to fetch.
     */
    where?: TruckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trucks to fetch.
     */
    orderBy?: TruckOrderByWithRelationInput | TruckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trucks.
     */
    cursor?: TruckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trucks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trucks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trucks.
     */
    distinct?: TruckScalarFieldEnum | TruckScalarFieldEnum[]
  }

  /**
   * Truck findMany
   */
  export type TruckFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * Filter, which Trucks to fetch.
     */
    where?: TruckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trucks to fetch.
     */
    orderBy?: TruckOrderByWithRelationInput | TruckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trucks.
     */
    cursor?: TruckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trucks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trucks.
     */
    skip?: number
    distinct?: TruckScalarFieldEnum | TruckScalarFieldEnum[]
  }

  /**
   * Truck create
   */
  export type TruckCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * The data needed to create a Truck.
     */
    data: XOR<TruckCreateInput, TruckUncheckedCreateInput>
  }

  /**
   * Truck createMany
   */
  export type TruckCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trucks.
     */
    data: TruckCreateManyInput | TruckCreateManyInput[]
  }

  /**
   * Truck update
   */
  export type TruckUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * The data needed to update a Truck.
     */
    data: XOR<TruckUpdateInput, TruckUncheckedUpdateInput>
    /**
     * Choose, which Truck to update.
     */
    where: TruckWhereUniqueInput
  }

  /**
   * Truck updateMany
   */
  export type TruckUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trucks.
     */
    data: XOR<TruckUpdateManyMutationInput, TruckUncheckedUpdateManyInput>
    /**
     * Filter which Trucks to update
     */
    where?: TruckWhereInput
  }

  /**
   * Truck upsert
   */
  export type TruckUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * The filter to search for the Truck to update in case it exists.
     */
    where: TruckWhereUniqueInput
    /**
     * In case the Truck found by the `where` argument doesn't exist, create a new Truck with this data.
     */
    create: XOR<TruckCreateInput, TruckUncheckedCreateInput>
    /**
     * In case the Truck was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TruckUpdateInput, TruckUncheckedUpdateInput>
  }

  /**
   * Truck delete
   */
  export type TruckDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
    /**
     * Filter which Truck to delete.
     */
    where: TruckWhereUniqueInput
  }

  /**
   * Truck deleteMany
   */
  export type TruckDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trucks to delete
     */
    where?: TruckWhereInput
  }

  /**
   * Truck findRaw
   */
  export type TruckFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Truck aggregateRaw
   */
  export type TruckAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Truck.loads
   */
  export type Truck$loadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadInclude<ExtArgs> | null
    where?: LoadWhereInput
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    cursor?: LoadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoadScalarFieldEnum | LoadScalarFieldEnum[]
  }

  /**
   * Truck.truckPrice
   */
  export type Truck$truckPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    where?: TruckPriceWhereInput
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    cursor?: TruckPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * Truck without action
   */
  export type TruckDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Truck
     */
    select?: TruckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckInclude<ExtArgs> | null
  }


  /**
   * Model TruckPrice
   */

  export type AggregateTruckPrice = {
    _count: TruckPriceCountAggregateOutputType | null
    _avg: TruckPriceAvgAggregateOutputType | null
    _sum: TruckPriceSumAggregateOutputType | null
    _min: TruckPriceMinAggregateOutputType | null
    _max: TruckPriceMaxAggregateOutputType | null
  }

  export type TruckPriceAvgAggregateOutputType = {
    quotedPrice: number | null
  }

  export type TruckPriceSumAggregateOutputType = {
    quotedPrice: number | null
  }

  export type TruckPriceMinAggregateOutputType = {
    id: string | null
    loadId: string | null
    truckId: string | null
    truckPriceEmail: string | null
    quotedPrice: number | null
  }

  export type TruckPriceMaxAggregateOutputType = {
    id: string | null
    loadId: string | null
    truckId: string | null
    truckPriceEmail: string | null
    quotedPrice: number | null
  }

  export type TruckPriceCountAggregateOutputType = {
    id: number
    loadId: number
    truckId: number
    truckPriceEmail: number
    quotedPrice: number
    _all: number
  }


  export type TruckPriceAvgAggregateInputType = {
    quotedPrice?: true
  }

  export type TruckPriceSumAggregateInputType = {
    quotedPrice?: true
  }

  export type TruckPriceMinAggregateInputType = {
    id?: true
    loadId?: true
    truckId?: true
    truckPriceEmail?: true
    quotedPrice?: true
  }

  export type TruckPriceMaxAggregateInputType = {
    id?: true
    loadId?: true
    truckId?: true
    truckPriceEmail?: true
    quotedPrice?: true
  }

  export type TruckPriceCountAggregateInputType = {
    id?: true
    loadId?: true
    truckId?: true
    truckPriceEmail?: true
    quotedPrice?: true
    _all?: true
  }

  export type TruckPriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TruckPrice to aggregate.
     */
    where?: TruckPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckPrices to fetch.
     */
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TruckPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TruckPrices
    **/
    _count?: true | TruckPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TruckPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TruckPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TruckPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TruckPriceMaxAggregateInputType
  }

  export type GetTruckPriceAggregateType<T extends TruckPriceAggregateArgs> = {
        [P in keyof T & keyof AggregateTruckPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTruckPrice[P]>
      : GetScalarType<T[P], AggregateTruckPrice[P]>
  }




  export type TruckPriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckPriceWhereInput
    orderBy?: TruckPriceOrderByWithAggregationInput | TruckPriceOrderByWithAggregationInput[]
    by: TruckPriceScalarFieldEnum[] | TruckPriceScalarFieldEnum
    having?: TruckPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TruckPriceCountAggregateInputType | true
    _avg?: TruckPriceAvgAggregateInputType
    _sum?: TruckPriceSumAggregateInputType
    _min?: TruckPriceMinAggregateInputType
    _max?: TruckPriceMaxAggregateInputType
  }

  export type TruckPriceGroupByOutputType = {
    id: string
    loadId: string
    truckId: string
    truckPriceEmail: string
    quotedPrice: number
    _count: TruckPriceCountAggregateOutputType | null
    _avg: TruckPriceAvgAggregateOutputType | null
    _sum: TruckPriceSumAggregateOutputType | null
    _min: TruckPriceMinAggregateOutputType | null
    _max: TruckPriceMaxAggregateOutputType | null
  }

  type GetTruckPriceGroupByPayload<T extends TruckPriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TruckPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TruckPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TruckPriceGroupByOutputType[P]>
            : GetScalarType<T[P], TruckPriceGroupByOutputType[P]>
        }
      >
    >


  export type TruckPriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loadId?: boolean
    truckId?: boolean
    truckPriceEmail?: boolean
    quotedPrice?: boolean
    load?: boolean | LoadDefaultArgs<ExtArgs>
    truck?: boolean | TruckDefaultArgs<ExtArgs>
    truckPriceOwner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["truckPrice"]>

  export type TruckPriceSelectScalar = {
    id?: boolean
    loadId?: boolean
    truckId?: boolean
    truckPriceEmail?: boolean
    quotedPrice?: boolean
  }


  export type TruckPriceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    load?: boolean | LoadDefaultArgs<ExtArgs>
    truck?: boolean | TruckDefaultArgs<ExtArgs>
    truckPriceOwner?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $TruckPricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TruckPrice"
    objects: {
      load: Prisma.$LoadPayload<ExtArgs>
      truck: Prisma.$TruckPayload<ExtArgs>
      truckPriceOwner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loadId: string
      truckId: string
      truckPriceEmail: string
      quotedPrice: number
    }, ExtArgs["result"]["truckPrice"]>
    composites: {}
  }


  type TruckPriceGetPayload<S extends boolean | null | undefined | TruckPriceDefaultArgs> = $Result.GetResult<Prisma.$TruckPricePayload, S>

  type TruckPriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TruckPriceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TruckPriceCountAggregateInputType | true
    }

  export interface TruckPriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TruckPrice'], meta: { name: 'TruckPrice' } }
    /**
     * Find zero or one TruckPrice that matches the filter.
     * @param {TruckPriceFindUniqueArgs} args - Arguments to find a TruckPrice
     * @example
     * // Get one TruckPrice
     * const truckPrice = await prisma.truckPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TruckPriceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceFindUniqueArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TruckPrice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TruckPriceFindUniqueOrThrowArgs} args - Arguments to find a TruckPrice
     * @example
     * // Get one TruckPrice
     * const truckPrice = await prisma.truckPrice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TruckPriceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TruckPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceFindFirstArgs} args - Arguments to find a TruckPrice
     * @example
     * // Get one TruckPrice
     * const truckPrice = await prisma.truckPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TruckPriceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceFindFirstArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TruckPrice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceFindFirstOrThrowArgs} args - Arguments to find a TruckPrice
     * @example
     * // Get one TruckPrice
     * const truckPrice = await prisma.truckPrice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TruckPriceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TruckPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TruckPrices
     * const truckPrices = await prisma.truckPrice.findMany()
     * 
     * // Get first 10 TruckPrices
     * const truckPrices = await prisma.truckPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const truckPriceWithIdOnly = await prisma.truckPrice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TruckPriceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TruckPrice.
     * @param {TruckPriceCreateArgs} args - Arguments to create a TruckPrice.
     * @example
     * // Create one TruckPrice
     * const TruckPrice = await prisma.truckPrice.create({
     *   data: {
     *     // ... data to create a TruckPrice
     *   }
     * })
     * 
    **/
    create<T extends TruckPriceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceCreateArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TruckPrices.
     * @param {TruckPriceCreateManyArgs} args - Arguments to create many TruckPrices.
     * @example
     * // Create many TruckPrices
     * const truckPrice = await prisma.truckPrice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TruckPriceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TruckPrice.
     * @param {TruckPriceDeleteArgs} args - Arguments to delete one TruckPrice.
     * @example
     * // Delete one TruckPrice
     * const TruckPrice = await prisma.truckPrice.delete({
     *   where: {
     *     // ... filter to delete one TruckPrice
     *   }
     * })
     * 
    **/
    delete<T extends TruckPriceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceDeleteArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TruckPrice.
     * @param {TruckPriceUpdateArgs} args - Arguments to update one TruckPrice.
     * @example
     * // Update one TruckPrice
     * const truckPrice = await prisma.truckPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TruckPriceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceUpdateArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TruckPrices.
     * @param {TruckPriceDeleteManyArgs} args - Arguments to filter TruckPrices to delete.
     * @example
     * // Delete a few TruckPrices
     * const { count } = await prisma.truckPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TruckPriceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TruckPriceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TruckPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TruckPrices
     * const truckPrice = await prisma.truckPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TruckPriceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TruckPrice.
     * @param {TruckPriceUpsertArgs} args - Arguments to update or create a TruckPrice.
     * @example
     * // Update or create a TruckPrice
     * const truckPrice = await prisma.truckPrice.upsert({
     *   create: {
     *     // ... data to create a TruckPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TruckPrice we want to update
     *   }
     * })
    **/
    upsert<T extends TruckPriceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TruckPriceUpsertArgs<ExtArgs>>
    ): Prisma__TruckPriceClient<$Result.GetResult<Prisma.$TruckPricePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more TruckPrices that matches the filter.
     * @param {TruckPriceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const truckPrice = await prisma.truckPrice.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TruckPriceFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TruckPrice.
     * @param {TruckPriceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const truckPrice = await prisma.truckPrice.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TruckPriceAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of TruckPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceCountArgs} args - Arguments to filter TruckPrices to count.
     * @example
     * // Count the number of TruckPrices
     * const count = await prisma.truckPrice.count({
     *   where: {
     *     // ... the filter for the TruckPrices we want to count
     *   }
     * })
    **/
    count<T extends TruckPriceCountArgs>(
      args?: Subset<T, TruckPriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TruckPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TruckPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TruckPriceAggregateArgs>(args: Subset<T, TruckPriceAggregateArgs>): Prisma.PrismaPromise<GetTruckPriceAggregateType<T>>

    /**
     * Group by TruckPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TruckPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TruckPriceGroupByArgs['orderBy'] }
        : { orderBy?: TruckPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TruckPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTruckPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TruckPrice model
   */
  readonly fields: TruckPriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TruckPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TruckPriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    load<T extends LoadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoadDefaultArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    truck<T extends TruckDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TruckDefaultArgs<ExtArgs>>): Prisma__TruckClient<$Result.GetResult<Prisma.$TruckPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    truckPriceOwner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TruckPrice model
   */ 
  interface TruckPriceFieldRefs {
    readonly id: FieldRef<"TruckPrice", 'String'>
    readonly loadId: FieldRef<"TruckPrice", 'String'>
    readonly truckId: FieldRef<"TruckPrice", 'String'>
    readonly truckPriceEmail: FieldRef<"TruckPrice", 'String'>
    readonly quotedPrice: FieldRef<"TruckPrice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TruckPrice findUnique
   */
  export type TruckPriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrice to fetch.
     */
    where: TruckPriceWhereUniqueInput
  }

  /**
   * TruckPrice findUniqueOrThrow
   */
  export type TruckPriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrice to fetch.
     */
    where: TruckPriceWhereUniqueInput
  }

  /**
   * TruckPrice findFirst
   */
  export type TruckPriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrice to fetch.
     */
    where?: TruckPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckPrices to fetch.
     */
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TruckPrices.
     */
    cursor?: TruckPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TruckPrices.
     */
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * TruckPrice findFirstOrThrow
   */
  export type TruckPriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrice to fetch.
     */
    where?: TruckPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckPrices to fetch.
     */
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TruckPrices.
     */
    cursor?: TruckPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TruckPrices.
     */
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * TruckPrice findMany
   */
  export type TruckPriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter, which TruckPrices to fetch.
     */
    where?: TruckPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckPrices to fetch.
     */
    orderBy?: TruckPriceOrderByWithRelationInput | TruckPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TruckPrices.
     */
    cursor?: TruckPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckPrices.
     */
    skip?: number
    distinct?: TruckPriceScalarFieldEnum | TruckPriceScalarFieldEnum[]
  }

  /**
   * TruckPrice create
   */
  export type TruckPriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * The data needed to create a TruckPrice.
     */
    data: XOR<TruckPriceCreateInput, TruckPriceUncheckedCreateInput>
  }

  /**
   * TruckPrice createMany
   */
  export type TruckPriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TruckPrices.
     */
    data: TruckPriceCreateManyInput | TruckPriceCreateManyInput[]
  }

  /**
   * TruckPrice update
   */
  export type TruckPriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * The data needed to update a TruckPrice.
     */
    data: XOR<TruckPriceUpdateInput, TruckPriceUncheckedUpdateInput>
    /**
     * Choose, which TruckPrice to update.
     */
    where: TruckPriceWhereUniqueInput
  }

  /**
   * TruckPrice updateMany
   */
  export type TruckPriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TruckPrices.
     */
    data: XOR<TruckPriceUpdateManyMutationInput, TruckPriceUncheckedUpdateManyInput>
    /**
     * Filter which TruckPrices to update
     */
    where?: TruckPriceWhereInput
  }

  /**
   * TruckPrice upsert
   */
  export type TruckPriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * The filter to search for the TruckPrice to update in case it exists.
     */
    where: TruckPriceWhereUniqueInput
    /**
     * In case the TruckPrice found by the `where` argument doesn't exist, create a new TruckPrice with this data.
     */
    create: XOR<TruckPriceCreateInput, TruckPriceUncheckedCreateInput>
    /**
     * In case the TruckPrice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TruckPriceUpdateInput, TruckPriceUncheckedUpdateInput>
  }

  /**
   * TruckPrice delete
   */
  export type TruckPriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
    /**
     * Filter which TruckPrice to delete.
     */
    where: TruckPriceWhereUniqueInput
  }

  /**
   * TruckPrice deleteMany
   */
  export type TruckPriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TruckPrices to delete
     */
    where?: TruckPriceWhereInput
  }

  /**
   * TruckPrice findRaw
   */
  export type TruckPriceFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TruckPrice aggregateRaw
   */
  export type TruckPriceAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TruckPrice without action
   */
  export type TruckPriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckPrice
     */
    select?: TruckPriceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckPriceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LoadScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    price: 'price',
    fromAddress: 'fromAddress',
    toAddress: 'toAddress',
    image: 'image',
    userEmail: 'userEmail',
    isBooked: 'isBooked',
    truckId: 'truckId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LoadScalarFieldEnum = (typeof LoadScalarFieldEnum)[keyof typeof LoadScalarFieldEnum]


  export const TruckScalarFieldEnum: {
    id: 'id',
    driverName: 'driverName',
    truckEmail: 'truckEmail',
    license: 'license',
    truckCapacity: 'truckCapacity',
    favLoads: 'favLoads',
    bookedLoads: 'bookedLoads'
  };

  export type TruckScalarFieldEnum = (typeof TruckScalarFieldEnum)[keyof typeof TruckScalarFieldEnum]


  export const TruckPriceScalarFieldEnum: {
    id: 'id',
    loadId: 'loadId',
    truckId: 'truckId',
    truckPriceEmail: 'truckPriceEmail',
    quotedPrice: 'quotedPrice'
  };

  export type TruckPriceScalarFieldEnum = (typeof TruckPriceScalarFieldEnum)[keyof typeof TruckPriceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    ownedLoads?: LoadListRelationFilter
    ownedTrucks?: TruckListRelationFilter
    truckPrice?: TruckPriceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    ownedLoads?: LoadOrderByRelationAggregateInput
    ownedTrucks?: TruckOrderByRelationAggregateInput
    truckPrice?: TruckPriceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    ownedLoads?: LoadListRelationFilter
    ownedTrucks?: TruckListRelationFilter
    truckPrice?: TruckPriceListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type LoadWhereInput = {
    AND?: LoadWhereInput | LoadWhereInput[]
    OR?: LoadWhereInput[]
    NOT?: LoadWhereInput | LoadWhereInput[]
    id?: StringFilter<"Load"> | string
    title?: StringFilter<"Load"> | string
    description?: StringFilter<"Load"> | string
    price?: IntFilter<"Load"> | number
    fromAddress?: StringFilter<"Load"> | string
    toAddress?: StringFilter<"Load"> | string
    image?: StringFilter<"Load"> | string
    userEmail?: StringFilter<"Load"> | string
    isBooked?: BoolFilter<"Load"> | boolean
    truckId?: StringNullableFilter<"Load"> | string | null
    createdAt?: DateTimeFilter<"Load"> | Date | string
    updatedAt?: DateTimeFilter<"Load"> | Date | string
    loadOwner?: XOR<UserRelationFilter, UserWhereInput>
    truckPrices?: TruckPriceListRelationFilter
    truck?: XOR<TruckNullableRelationFilter, TruckWhereInput> | null
  }

  export type LoadOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    isBooked?: SortOrder
    truckId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loadOwner?: UserOrderByWithRelationInput
    truckPrices?: TruckPriceOrderByRelationAggregateInput
    truck?: TruckOrderByWithRelationInput
  }

  export type LoadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoadWhereInput | LoadWhereInput[]
    OR?: LoadWhereInput[]
    NOT?: LoadWhereInput | LoadWhereInput[]
    title?: StringFilter<"Load"> | string
    description?: StringFilter<"Load"> | string
    price?: IntFilter<"Load"> | number
    fromAddress?: StringFilter<"Load"> | string
    toAddress?: StringFilter<"Load"> | string
    image?: StringFilter<"Load"> | string
    userEmail?: StringFilter<"Load"> | string
    isBooked?: BoolFilter<"Load"> | boolean
    truckId?: StringNullableFilter<"Load"> | string | null
    createdAt?: DateTimeFilter<"Load"> | Date | string
    updatedAt?: DateTimeFilter<"Load"> | Date | string
    loadOwner?: XOR<UserRelationFilter, UserWhereInput>
    truckPrices?: TruckPriceListRelationFilter
    truck?: XOR<TruckNullableRelationFilter, TruckWhereInput> | null
  }, "id">

  export type LoadOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    isBooked?: SortOrder
    truckId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LoadCountOrderByAggregateInput
    _avg?: LoadAvgOrderByAggregateInput
    _max?: LoadMaxOrderByAggregateInput
    _min?: LoadMinOrderByAggregateInput
    _sum?: LoadSumOrderByAggregateInput
  }

  export type LoadScalarWhereWithAggregatesInput = {
    AND?: LoadScalarWhereWithAggregatesInput | LoadScalarWhereWithAggregatesInput[]
    OR?: LoadScalarWhereWithAggregatesInput[]
    NOT?: LoadScalarWhereWithAggregatesInput | LoadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Load"> | string
    title?: StringWithAggregatesFilter<"Load"> | string
    description?: StringWithAggregatesFilter<"Load"> | string
    price?: IntWithAggregatesFilter<"Load"> | number
    fromAddress?: StringWithAggregatesFilter<"Load"> | string
    toAddress?: StringWithAggregatesFilter<"Load"> | string
    image?: StringWithAggregatesFilter<"Load"> | string
    userEmail?: StringWithAggregatesFilter<"Load"> | string
    isBooked?: BoolWithAggregatesFilter<"Load"> | boolean
    truckId?: StringNullableWithAggregatesFilter<"Load"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Load"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Load"> | Date | string
  }

  export type TruckWhereInput = {
    AND?: TruckWhereInput | TruckWhereInput[]
    OR?: TruckWhereInput[]
    NOT?: TruckWhereInput | TruckWhereInput[]
    id?: StringFilter<"Truck"> | string
    driverName?: StringFilter<"Truck"> | string
    truckEmail?: StringFilter<"Truck"> | string
    license?: StringFilter<"Truck"> | string
    truckCapacity?: IntFilter<"Truck"> | number
    favLoads?: StringNullableListFilter<"Truck">
    bookedLoads?: JsonNullableListFilter<"Truck">
    truckOwner?: XOR<UserRelationFilter, UserWhereInput>
    loads?: LoadListRelationFilter
    truckPrice?: TruckPriceListRelationFilter
  }

  export type TruckOrderByWithRelationInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
    favLoads?: SortOrder
    bookedLoads?: SortOrder
    truckOwner?: UserOrderByWithRelationInput
    loads?: LoadOrderByRelationAggregateInput
    truckPrice?: TruckPriceOrderByRelationAggregateInput
  }

  export type TruckWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    license?: string
    AND?: TruckWhereInput | TruckWhereInput[]
    OR?: TruckWhereInput[]
    NOT?: TruckWhereInput | TruckWhereInput[]
    driverName?: StringFilter<"Truck"> | string
    truckEmail?: StringFilter<"Truck"> | string
    truckCapacity?: IntFilter<"Truck"> | number
    favLoads?: StringNullableListFilter<"Truck">
    bookedLoads?: JsonNullableListFilter<"Truck">
    truckOwner?: XOR<UserRelationFilter, UserWhereInput>
    loads?: LoadListRelationFilter
    truckPrice?: TruckPriceListRelationFilter
  }, "id" | "license">

  export type TruckOrderByWithAggregationInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
    favLoads?: SortOrder
    bookedLoads?: SortOrder
    _count?: TruckCountOrderByAggregateInput
    _avg?: TruckAvgOrderByAggregateInput
    _max?: TruckMaxOrderByAggregateInput
    _min?: TruckMinOrderByAggregateInput
    _sum?: TruckSumOrderByAggregateInput
  }

  export type TruckScalarWhereWithAggregatesInput = {
    AND?: TruckScalarWhereWithAggregatesInput | TruckScalarWhereWithAggregatesInput[]
    OR?: TruckScalarWhereWithAggregatesInput[]
    NOT?: TruckScalarWhereWithAggregatesInput | TruckScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Truck"> | string
    driverName?: StringWithAggregatesFilter<"Truck"> | string
    truckEmail?: StringWithAggregatesFilter<"Truck"> | string
    license?: StringWithAggregatesFilter<"Truck"> | string
    truckCapacity?: IntWithAggregatesFilter<"Truck"> | number
    favLoads?: StringNullableListFilter<"Truck">
    bookedLoads?: JsonNullableListFilter<"Truck">
  }

  export type TruckPriceWhereInput = {
    AND?: TruckPriceWhereInput | TruckPriceWhereInput[]
    OR?: TruckPriceWhereInput[]
    NOT?: TruckPriceWhereInput | TruckPriceWhereInput[]
    id?: StringFilter<"TruckPrice"> | string
    loadId?: StringFilter<"TruckPrice"> | string
    truckId?: StringFilter<"TruckPrice"> | string
    truckPriceEmail?: StringFilter<"TruckPrice"> | string
    quotedPrice?: IntFilter<"TruckPrice"> | number
    load?: XOR<LoadRelationFilter, LoadWhereInput>
    truck?: XOR<TruckRelationFilter, TruckWhereInput>
    truckPriceOwner?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TruckPriceOrderByWithRelationInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    truckPriceEmail?: SortOrder
    quotedPrice?: SortOrder
    load?: LoadOrderByWithRelationInput
    truck?: TruckOrderByWithRelationInput
    truckPriceOwner?: UserOrderByWithRelationInput
  }

  export type TruckPriceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    loadId_truckId?: TruckPriceLoadIdTruckIdCompoundUniqueInput
    AND?: TruckPriceWhereInput | TruckPriceWhereInput[]
    OR?: TruckPriceWhereInput[]
    NOT?: TruckPriceWhereInput | TruckPriceWhereInput[]
    loadId?: StringFilter<"TruckPrice"> | string
    truckId?: StringFilter<"TruckPrice"> | string
    truckPriceEmail?: StringFilter<"TruckPrice"> | string
    quotedPrice?: IntFilter<"TruckPrice"> | number
    load?: XOR<LoadRelationFilter, LoadWhereInput>
    truck?: XOR<TruckRelationFilter, TruckWhereInput>
    truckPriceOwner?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "loadId_truckId">

  export type TruckPriceOrderByWithAggregationInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    truckPriceEmail?: SortOrder
    quotedPrice?: SortOrder
    _count?: TruckPriceCountOrderByAggregateInput
    _avg?: TruckPriceAvgOrderByAggregateInput
    _max?: TruckPriceMaxOrderByAggregateInput
    _min?: TruckPriceMinOrderByAggregateInput
    _sum?: TruckPriceSumOrderByAggregateInput
  }

  export type TruckPriceScalarWhereWithAggregatesInput = {
    AND?: TruckPriceScalarWhereWithAggregatesInput | TruckPriceScalarWhereWithAggregatesInput[]
    OR?: TruckPriceScalarWhereWithAggregatesInput[]
    NOT?: TruckPriceScalarWhereWithAggregatesInput | TruckPriceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TruckPrice"> | string
    loadId?: StringWithAggregatesFilter<"TruckPrice"> | string
    truckId?: StringWithAggregatesFilter<"TruckPrice"> | string
    truckPriceEmail?: StringWithAggregatesFilter<"TruckPrice"> | string
    quotedPrice?: IntWithAggregatesFilter<"TruckPrice"> | number
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadCreateNestedManyWithoutLoadOwnerInput
    ownedTrucks?: TruckCreateNestedManyWithoutTruckOwnerInput
    truckPrice?: TruckPriceCreateNestedManyWithoutTruckPriceOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadUncheckedCreateNestedManyWithoutLoadOwnerInput
    ownedTrucks?: TruckUncheckedCreateNestedManyWithoutTruckOwnerInput
    truckPrice?: TruckPriceUncheckedCreateNestedManyWithoutTruckPriceOwnerInput
  }

  export type UserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadUpdateManyWithoutLoadOwnerNestedInput
    ownedTrucks?: TruckUpdateManyWithoutTruckOwnerNestedInput
    truckPrice?: TruckPriceUpdateManyWithoutTruckPriceOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadUncheckedUpdateManyWithoutLoadOwnerNestedInput
    ownedTrucks?: TruckUncheckedUpdateManyWithoutTruckOwnerNestedInput
    truckPrice?: TruckPriceUncheckedUpdateManyWithoutTruckPriceOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoadCreateInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    loadOwner: UserCreateNestedOneWithoutOwnedLoadsInput
    truckPrices?: TruckPriceCreateNestedManyWithoutLoadInput
    truck?: TruckCreateNestedOneWithoutLoadsInput
  }

  export type LoadUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    isBooked?: boolean
    truckId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    truckPrices?: TruckPriceUncheckedCreateNestedManyWithoutLoadInput
  }

  export type LoadUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loadOwner?: UserUpdateOneRequiredWithoutOwnedLoadsNestedInput
    truckPrices?: TruckPriceUpdateManyWithoutLoadNestedInput
    truck?: TruckUpdateOneWithoutLoadsNestedInput
  }

  export type LoadUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckPrices?: TruckPriceUncheckedUpdateManyWithoutLoadNestedInput
  }

  export type LoadCreateManyInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    isBooked?: boolean
    truckId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoadUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoadUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckCreateInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
    truckOwner: UserCreateNestedOneWithoutOwnedTrucksInput
    loads?: LoadCreateNestedManyWithoutTruckInput
    truckPrice?: TruckPriceCreateNestedManyWithoutTruckInput
  }

  export type TruckUncheckedCreateInput = {
    id?: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
    loads?: LoadUncheckedCreateNestedManyWithoutTruckInput
    truckPrice?: TruckPriceUncheckedCreateNestedManyWithoutTruckInput
  }

  export type TruckUpdateInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
    truckOwner?: UserUpdateOneRequiredWithoutOwnedTrucksNestedInput
    loads?: LoadUpdateManyWithoutTruckNestedInput
    truckPrice?: TruckPriceUpdateManyWithoutTruckNestedInput
  }

  export type TruckUncheckedUpdateInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    truckEmail?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
    loads?: LoadUncheckedUpdateManyWithoutTruckNestedInput
    truckPrice?: TruckPriceUncheckedUpdateManyWithoutTruckNestedInput
  }

  export type TruckCreateManyInput = {
    id?: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
  }

  export type TruckUpdateManyMutationInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
  }

  export type TruckUncheckedUpdateManyInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    truckEmail?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
  }

  export type TruckPriceCreateInput = {
    id?: string
    quotedPrice: number
    load: LoadCreateNestedOneWithoutTruckPricesInput
    truck: TruckCreateNestedOneWithoutTruckPriceInput
    truckPriceOwner: UserCreateNestedOneWithoutTruckPriceInput
  }

  export type TruckPriceUncheckedCreateInput = {
    id?: string
    loadId: string
    truckId: string
    truckPriceEmail: string
    quotedPrice: number
  }

  export type TruckPriceUpdateInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
    load?: LoadUpdateOneRequiredWithoutTruckPricesNestedInput
    truck?: TruckUpdateOneRequiredWithoutTruckPriceNestedInput
    truckPriceOwner?: UserUpdateOneRequiredWithoutTruckPriceNestedInput
  }

  export type TruckPriceUncheckedUpdateInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    truckPriceEmail?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceCreateManyInput = {
    id?: string
    loadId: string
    truckId: string
    truckPriceEmail: string
    quotedPrice: number
  }

  export type TruckPriceUpdateManyMutationInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceUncheckedUpdateManyInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    truckPriceEmail?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type LoadListRelationFilter = {
    every?: LoadWhereInput
    some?: LoadWhereInput
    none?: LoadWhereInput
  }

  export type TruckListRelationFilter = {
    every?: TruckWhereInput
    some?: TruckWhereInput
    none?: TruckWhereInput
  }

  export type TruckPriceListRelationFilter = {
    every?: TruckPriceWhereInput
    some?: TruckPriceWhereInput
    none?: TruckPriceWhereInput
  }

  export type LoadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TruckOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TruckPriceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    image?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TruckNullableRelationFilter = {
    is?: TruckWhereInput | null
    isNot?: TruckWhereInput | null
  }

  export type LoadCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    isBooked?: SortOrder
    truckId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LoadAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type LoadMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    isBooked?: SortOrder
    truckId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LoadMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    image?: SortOrder
    userEmail?: SortOrder
    isBooked?: SortOrder
    truckId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LoadSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableListFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TruckCountOrderByAggregateInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
    favLoads?: SortOrder
    bookedLoads?: SortOrder
  }

  export type TruckAvgOrderByAggregateInput = {
    truckCapacity?: SortOrder
  }

  export type TruckMaxOrderByAggregateInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
  }

  export type TruckMinOrderByAggregateInput = {
    id?: SortOrder
    driverName?: SortOrder
    truckEmail?: SortOrder
    license?: SortOrder
    truckCapacity?: SortOrder
  }

  export type TruckSumOrderByAggregateInput = {
    truckCapacity?: SortOrder
  }

  export type LoadRelationFilter = {
    is?: LoadWhereInput
    isNot?: LoadWhereInput
  }

  export type TruckRelationFilter = {
    is?: TruckWhereInput
    isNot?: TruckWhereInput
  }

  export type TruckPriceLoadIdTruckIdCompoundUniqueInput = {
    loadId: string
    truckId: string
  }

  export type TruckPriceCountOrderByAggregateInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    truckPriceEmail?: SortOrder
    quotedPrice?: SortOrder
  }

  export type TruckPriceAvgOrderByAggregateInput = {
    quotedPrice?: SortOrder
  }

  export type TruckPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    truckPriceEmail?: SortOrder
    quotedPrice?: SortOrder
  }

  export type TruckPriceMinOrderByAggregateInput = {
    id?: SortOrder
    loadId?: SortOrder
    truckId?: SortOrder
    truckPriceEmail?: SortOrder
    quotedPrice?: SortOrder
  }

  export type TruckPriceSumOrderByAggregateInput = {
    quotedPrice?: SortOrder
  }

  export type LoadCreateNestedManyWithoutLoadOwnerInput = {
    create?: XOR<LoadCreateWithoutLoadOwnerInput, LoadUncheckedCreateWithoutLoadOwnerInput> | LoadCreateWithoutLoadOwnerInput[] | LoadUncheckedCreateWithoutLoadOwnerInput[]
    connectOrCreate?: LoadCreateOrConnectWithoutLoadOwnerInput | LoadCreateOrConnectWithoutLoadOwnerInput[]
    createMany?: LoadCreateManyLoadOwnerInputEnvelope
    connect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
  }

  export type TruckCreateNestedManyWithoutTruckOwnerInput = {
    create?: XOR<TruckCreateWithoutTruckOwnerInput, TruckUncheckedCreateWithoutTruckOwnerInput> | TruckCreateWithoutTruckOwnerInput[] | TruckUncheckedCreateWithoutTruckOwnerInput[]
    connectOrCreate?: TruckCreateOrConnectWithoutTruckOwnerInput | TruckCreateOrConnectWithoutTruckOwnerInput[]
    createMany?: TruckCreateManyTruckOwnerInputEnvelope
    connect?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
  }

  export type TruckPriceCreateNestedManyWithoutTruckPriceOwnerInput = {
    create?: XOR<TruckPriceCreateWithoutTruckPriceOwnerInput, TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput> | TruckPriceCreateWithoutTruckPriceOwnerInput[] | TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput | TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput[]
    createMany?: TruckPriceCreateManyTruckPriceOwnerInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type LoadUncheckedCreateNestedManyWithoutLoadOwnerInput = {
    create?: XOR<LoadCreateWithoutLoadOwnerInput, LoadUncheckedCreateWithoutLoadOwnerInput> | LoadCreateWithoutLoadOwnerInput[] | LoadUncheckedCreateWithoutLoadOwnerInput[]
    connectOrCreate?: LoadCreateOrConnectWithoutLoadOwnerInput | LoadCreateOrConnectWithoutLoadOwnerInput[]
    createMany?: LoadCreateManyLoadOwnerInputEnvelope
    connect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
  }

  export type TruckUncheckedCreateNestedManyWithoutTruckOwnerInput = {
    create?: XOR<TruckCreateWithoutTruckOwnerInput, TruckUncheckedCreateWithoutTruckOwnerInput> | TruckCreateWithoutTruckOwnerInput[] | TruckUncheckedCreateWithoutTruckOwnerInput[]
    connectOrCreate?: TruckCreateOrConnectWithoutTruckOwnerInput | TruckCreateOrConnectWithoutTruckOwnerInput[]
    createMany?: TruckCreateManyTruckOwnerInputEnvelope
    connect?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
  }

  export type TruckPriceUncheckedCreateNestedManyWithoutTruckPriceOwnerInput = {
    create?: XOR<TruckPriceCreateWithoutTruckPriceOwnerInput, TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput> | TruckPriceCreateWithoutTruckPriceOwnerInput[] | TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput | TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput[]
    createMany?: TruckPriceCreateManyTruckPriceOwnerInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type LoadUpdateManyWithoutLoadOwnerNestedInput = {
    create?: XOR<LoadCreateWithoutLoadOwnerInput, LoadUncheckedCreateWithoutLoadOwnerInput> | LoadCreateWithoutLoadOwnerInput[] | LoadUncheckedCreateWithoutLoadOwnerInput[]
    connectOrCreate?: LoadCreateOrConnectWithoutLoadOwnerInput | LoadCreateOrConnectWithoutLoadOwnerInput[]
    upsert?: LoadUpsertWithWhereUniqueWithoutLoadOwnerInput | LoadUpsertWithWhereUniqueWithoutLoadOwnerInput[]
    createMany?: LoadCreateManyLoadOwnerInputEnvelope
    set?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    disconnect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    delete?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    connect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    update?: LoadUpdateWithWhereUniqueWithoutLoadOwnerInput | LoadUpdateWithWhereUniqueWithoutLoadOwnerInput[]
    updateMany?: LoadUpdateManyWithWhereWithoutLoadOwnerInput | LoadUpdateManyWithWhereWithoutLoadOwnerInput[]
    deleteMany?: LoadScalarWhereInput | LoadScalarWhereInput[]
  }

  export type TruckUpdateManyWithoutTruckOwnerNestedInput = {
    create?: XOR<TruckCreateWithoutTruckOwnerInput, TruckUncheckedCreateWithoutTruckOwnerInput> | TruckCreateWithoutTruckOwnerInput[] | TruckUncheckedCreateWithoutTruckOwnerInput[]
    connectOrCreate?: TruckCreateOrConnectWithoutTruckOwnerInput | TruckCreateOrConnectWithoutTruckOwnerInput[]
    upsert?: TruckUpsertWithWhereUniqueWithoutTruckOwnerInput | TruckUpsertWithWhereUniqueWithoutTruckOwnerInput[]
    createMany?: TruckCreateManyTruckOwnerInputEnvelope
    set?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
    disconnect?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
    delete?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
    connect?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
    update?: TruckUpdateWithWhereUniqueWithoutTruckOwnerInput | TruckUpdateWithWhereUniqueWithoutTruckOwnerInput[]
    updateMany?: TruckUpdateManyWithWhereWithoutTruckOwnerInput | TruckUpdateManyWithWhereWithoutTruckOwnerInput[]
    deleteMany?: TruckScalarWhereInput | TruckScalarWhereInput[]
  }

  export type TruckPriceUpdateManyWithoutTruckPriceOwnerNestedInput = {
    create?: XOR<TruckPriceCreateWithoutTruckPriceOwnerInput, TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput> | TruckPriceCreateWithoutTruckPriceOwnerInput[] | TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput | TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutTruckPriceOwnerInput | TruckPriceUpsertWithWhereUniqueWithoutTruckPriceOwnerInput[]
    createMany?: TruckPriceCreateManyTruckPriceOwnerInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutTruckPriceOwnerInput | TruckPriceUpdateWithWhereUniqueWithoutTruckPriceOwnerInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutTruckPriceOwnerInput | TruckPriceUpdateManyWithWhereWithoutTruckPriceOwnerInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type LoadUncheckedUpdateManyWithoutLoadOwnerNestedInput = {
    create?: XOR<LoadCreateWithoutLoadOwnerInput, LoadUncheckedCreateWithoutLoadOwnerInput> | LoadCreateWithoutLoadOwnerInput[] | LoadUncheckedCreateWithoutLoadOwnerInput[]
    connectOrCreate?: LoadCreateOrConnectWithoutLoadOwnerInput | LoadCreateOrConnectWithoutLoadOwnerInput[]
    upsert?: LoadUpsertWithWhereUniqueWithoutLoadOwnerInput | LoadUpsertWithWhereUniqueWithoutLoadOwnerInput[]
    createMany?: LoadCreateManyLoadOwnerInputEnvelope
    set?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    disconnect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    delete?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    connect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    update?: LoadUpdateWithWhereUniqueWithoutLoadOwnerInput | LoadUpdateWithWhereUniqueWithoutLoadOwnerInput[]
    updateMany?: LoadUpdateManyWithWhereWithoutLoadOwnerInput | LoadUpdateManyWithWhereWithoutLoadOwnerInput[]
    deleteMany?: LoadScalarWhereInput | LoadScalarWhereInput[]
  }

  export type TruckUncheckedUpdateManyWithoutTruckOwnerNestedInput = {
    create?: XOR<TruckCreateWithoutTruckOwnerInput, TruckUncheckedCreateWithoutTruckOwnerInput> | TruckCreateWithoutTruckOwnerInput[] | TruckUncheckedCreateWithoutTruckOwnerInput[]
    connectOrCreate?: TruckCreateOrConnectWithoutTruckOwnerInput | TruckCreateOrConnectWithoutTruckOwnerInput[]
    upsert?: TruckUpsertWithWhereUniqueWithoutTruckOwnerInput | TruckUpsertWithWhereUniqueWithoutTruckOwnerInput[]
    createMany?: TruckCreateManyTruckOwnerInputEnvelope
    set?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
    disconnect?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
    delete?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
    connect?: TruckWhereUniqueInput | TruckWhereUniqueInput[]
    update?: TruckUpdateWithWhereUniqueWithoutTruckOwnerInput | TruckUpdateWithWhereUniqueWithoutTruckOwnerInput[]
    updateMany?: TruckUpdateManyWithWhereWithoutTruckOwnerInput | TruckUpdateManyWithWhereWithoutTruckOwnerInput[]
    deleteMany?: TruckScalarWhereInput | TruckScalarWhereInput[]
  }

  export type TruckPriceUncheckedUpdateManyWithoutTruckPriceOwnerNestedInput = {
    create?: XOR<TruckPriceCreateWithoutTruckPriceOwnerInput, TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput> | TruckPriceCreateWithoutTruckPriceOwnerInput[] | TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput | TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutTruckPriceOwnerInput | TruckPriceUpsertWithWhereUniqueWithoutTruckPriceOwnerInput[]
    createMany?: TruckPriceCreateManyTruckPriceOwnerInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutTruckPriceOwnerInput | TruckPriceUpdateWithWhereUniqueWithoutTruckPriceOwnerInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutTruckPriceOwnerInput | TruckPriceUpdateManyWithWhereWithoutTruckPriceOwnerInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOwnedLoadsInput = {
    create?: XOR<UserCreateWithoutOwnedLoadsInput, UserUncheckedCreateWithoutOwnedLoadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLoadsInput
    connect?: UserWhereUniqueInput
  }

  export type TruckPriceCreateNestedManyWithoutLoadInput = {
    create?: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput> | TruckPriceCreateWithoutLoadInput[] | TruckPriceUncheckedCreateWithoutLoadInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutLoadInput | TruckPriceCreateOrConnectWithoutLoadInput[]
    createMany?: TruckPriceCreateManyLoadInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type TruckCreateNestedOneWithoutLoadsInput = {
    create?: XOR<TruckCreateWithoutLoadsInput, TruckUncheckedCreateWithoutLoadsInput>
    connectOrCreate?: TruckCreateOrConnectWithoutLoadsInput
    connect?: TruckWhereUniqueInput
  }

  export type TruckPriceUncheckedCreateNestedManyWithoutLoadInput = {
    create?: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput> | TruckPriceCreateWithoutLoadInput[] | TruckPriceUncheckedCreateWithoutLoadInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutLoadInput | TruckPriceCreateOrConnectWithoutLoadInput[]
    createMany?: TruckPriceCreateManyLoadInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutOwnedLoadsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedLoadsInput, UserUncheckedCreateWithoutOwnedLoadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLoadsInput
    upsert?: UserUpsertWithoutOwnedLoadsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedLoadsInput, UserUpdateWithoutOwnedLoadsInput>, UserUncheckedUpdateWithoutOwnedLoadsInput>
  }

  export type TruckPriceUpdateManyWithoutLoadNestedInput = {
    create?: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput> | TruckPriceCreateWithoutLoadInput[] | TruckPriceUncheckedCreateWithoutLoadInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutLoadInput | TruckPriceCreateOrConnectWithoutLoadInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutLoadInput | TruckPriceUpsertWithWhereUniqueWithoutLoadInput[]
    createMany?: TruckPriceCreateManyLoadInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutLoadInput | TruckPriceUpdateWithWhereUniqueWithoutLoadInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutLoadInput | TruckPriceUpdateManyWithWhereWithoutLoadInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type TruckUpdateOneWithoutLoadsNestedInput = {
    create?: XOR<TruckCreateWithoutLoadsInput, TruckUncheckedCreateWithoutLoadsInput>
    connectOrCreate?: TruckCreateOrConnectWithoutLoadsInput
    upsert?: TruckUpsertWithoutLoadsInput
    disconnect?: boolean
    delete?: TruckWhereInput | boolean
    connect?: TruckWhereUniqueInput
    update?: XOR<XOR<TruckUpdateToOneWithWhereWithoutLoadsInput, TruckUpdateWithoutLoadsInput>, TruckUncheckedUpdateWithoutLoadsInput>
  }

  export type TruckPriceUncheckedUpdateManyWithoutLoadNestedInput = {
    create?: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput> | TruckPriceCreateWithoutLoadInput[] | TruckPriceUncheckedCreateWithoutLoadInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutLoadInput | TruckPriceCreateOrConnectWithoutLoadInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutLoadInput | TruckPriceUpsertWithWhereUniqueWithoutLoadInput[]
    createMany?: TruckPriceCreateManyLoadInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutLoadInput | TruckPriceUpdateWithWhereUniqueWithoutLoadInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutLoadInput | TruckPriceUpdateManyWithWhereWithoutLoadInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type TruckCreatefavLoadsInput = {
    set: string[]
  }

  export type TruckCreatebookedLoadsInput = {
    set: InputJsonValue[]
  }

  export type UserCreateNestedOneWithoutOwnedTrucksInput = {
    create?: XOR<UserCreateWithoutOwnedTrucksInput, UserUncheckedCreateWithoutOwnedTrucksInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedTrucksInput
    connect?: UserWhereUniqueInput
  }

  export type LoadCreateNestedManyWithoutTruckInput = {
    create?: XOR<LoadCreateWithoutTruckInput, LoadUncheckedCreateWithoutTruckInput> | LoadCreateWithoutTruckInput[] | LoadUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: LoadCreateOrConnectWithoutTruckInput | LoadCreateOrConnectWithoutTruckInput[]
    createMany?: LoadCreateManyTruckInputEnvelope
    connect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
  }

  export type TruckPriceCreateNestedManyWithoutTruckInput = {
    create?: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput> | TruckPriceCreateWithoutTruckInput[] | TruckPriceUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckInput | TruckPriceCreateOrConnectWithoutTruckInput[]
    createMany?: TruckPriceCreateManyTruckInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type LoadUncheckedCreateNestedManyWithoutTruckInput = {
    create?: XOR<LoadCreateWithoutTruckInput, LoadUncheckedCreateWithoutTruckInput> | LoadCreateWithoutTruckInput[] | LoadUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: LoadCreateOrConnectWithoutTruckInput | LoadCreateOrConnectWithoutTruckInput[]
    createMany?: LoadCreateManyTruckInputEnvelope
    connect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
  }

  export type TruckPriceUncheckedCreateNestedManyWithoutTruckInput = {
    create?: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput> | TruckPriceCreateWithoutTruckInput[] | TruckPriceUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckInput | TruckPriceCreateOrConnectWithoutTruckInput[]
    createMany?: TruckPriceCreateManyTruckInputEnvelope
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
  }

  export type TruckUpdatefavLoadsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TruckUpdatebookedLoadsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type UserUpdateOneRequiredWithoutOwnedTrucksNestedInput = {
    create?: XOR<UserCreateWithoutOwnedTrucksInput, UserUncheckedCreateWithoutOwnedTrucksInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedTrucksInput
    upsert?: UserUpsertWithoutOwnedTrucksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedTrucksInput, UserUpdateWithoutOwnedTrucksInput>, UserUncheckedUpdateWithoutOwnedTrucksInput>
  }

  export type LoadUpdateManyWithoutTruckNestedInput = {
    create?: XOR<LoadCreateWithoutTruckInput, LoadUncheckedCreateWithoutTruckInput> | LoadCreateWithoutTruckInput[] | LoadUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: LoadCreateOrConnectWithoutTruckInput | LoadCreateOrConnectWithoutTruckInput[]
    upsert?: LoadUpsertWithWhereUniqueWithoutTruckInput | LoadUpsertWithWhereUniqueWithoutTruckInput[]
    createMany?: LoadCreateManyTruckInputEnvelope
    set?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    disconnect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    delete?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    connect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    update?: LoadUpdateWithWhereUniqueWithoutTruckInput | LoadUpdateWithWhereUniqueWithoutTruckInput[]
    updateMany?: LoadUpdateManyWithWhereWithoutTruckInput | LoadUpdateManyWithWhereWithoutTruckInput[]
    deleteMany?: LoadScalarWhereInput | LoadScalarWhereInput[]
  }

  export type TruckPriceUpdateManyWithoutTruckNestedInput = {
    create?: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput> | TruckPriceCreateWithoutTruckInput[] | TruckPriceUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckInput | TruckPriceCreateOrConnectWithoutTruckInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutTruckInput | TruckPriceUpsertWithWhereUniqueWithoutTruckInput[]
    createMany?: TruckPriceCreateManyTruckInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutTruckInput | TruckPriceUpdateWithWhereUniqueWithoutTruckInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutTruckInput | TruckPriceUpdateManyWithWhereWithoutTruckInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type LoadUncheckedUpdateManyWithoutTruckNestedInput = {
    create?: XOR<LoadCreateWithoutTruckInput, LoadUncheckedCreateWithoutTruckInput> | LoadCreateWithoutTruckInput[] | LoadUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: LoadCreateOrConnectWithoutTruckInput | LoadCreateOrConnectWithoutTruckInput[]
    upsert?: LoadUpsertWithWhereUniqueWithoutTruckInput | LoadUpsertWithWhereUniqueWithoutTruckInput[]
    createMany?: LoadCreateManyTruckInputEnvelope
    set?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    disconnect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    delete?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    connect?: LoadWhereUniqueInput | LoadWhereUniqueInput[]
    update?: LoadUpdateWithWhereUniqueWithoutTruckInput | LoadUpdateWithWhereUniqueWithoutTruckInput[]
    updateMany?: LoadUpdateManyWithWhereWithoutTruckInput | LoadUpdateManyWithWhereWithoutTruckInput[]
    deleteMany?: LoadScalarWhereInput | LoadScalarWhereInput[]
  }

  export type TruckPriceUncheckedUpdateManyWithoutTruckNestedInput = {
    create?: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput> | TruckPriceCreateWithoutTruckInput[] | TruckPriceUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TruckPriceCreateOrConnectWithoutTruckInput | TruckPriceCreateOrConnectWithoutTruckInput[]
    upsert?: TruckPriceUpsertWithWhereUniqueWithoutTruckInput | TruckPriceUpsertWithWhereUniqueWithoutTruckInput[]
    createMany?: TruckPriceCreateManyTruckInputEnvelope
    set?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    disconnect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    delete?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    connect?: TruckPriceWhereUniqueInput | TruckPriceWhereUniqueInput[]
    update?: TruckPriceUpdateWithWhereUniqueWithoutTruckInput | TruckPriceUpdateWithWhereUniqueWithoutTruckInput[]
    updateMany?: TruckPriceUpdateManyWithWhereWithoutTruckInput | TruckPriceUpdateManyWithWhereWithoutTruckInput[]
    deleteMany?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
  }

  export type LoadCreateNestedOneWithoutTruckPricesInput = {
    create?: XOR<LoadCreateWithoutTruckPricesInput, LoadUncheckedCreateWithoutTruckPricesInput>
    connectOrCreate?: LoadCreateOrConnectWithoutTruckPricesInput
    connect?: LoadWhereUniqueInput
  }

  export type TruckCreateNestedOneWithoutTruckPriceInput = {
    create?: XOR<TruckCreateWithoutTruckPriceInput, TruckUncheckedCreateWithoutTruckPriceInput>
    connectOrCreate?: TruckCreateOrConnectWithoutTruckPriceInput
    connect?: TruckWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTruckPriceInput = {
    create?: XOR<UserCreateWithoutTruckPriceInput, UserUncheckedCreateWithoutTruckPriceInput>
    connectOrCreate?: UserCreateOrConnectWithoutTruckPriceInput
    connect?: UserWhereUniqueInput
  }

  export type LoadUpdateOneRequiredWithoutTruckPricesNestedInput = {
    create?: XOR<LoadCreateWithoutTruckPricesInput, LoadUncheckedCreateWithoutTruckPricesInput>
    connectOrCreate?: LoadCreateOrConnectWithoutTruckPricesInput
    upsert?: LoadUpsertWithoutTruckPricesInput
    connect?: LoadWhereUniqueInput
    update?: XOR<XOR<LoadUpdateToOneWithWhereWithoutTruckPricesInput, LoadUpdateWithoutTruckPricesInput>, LoadUncheckedUpdateWithoutTruckPricesInput>
  }

  export type TruckUpdateOneRequiredWithoutTruckPriceNestedInput = {
    create?: XOR<TruckCreateWithoutTruckPriceInput, TruckUncheckedCreateWithoutTruckPriceInput>
    connectOrCreate?: TruckCreateOrConnectWithoutTruckPriceInput
    upsert?: TruckUpsertWithoutTruckPriceInput
    connect?: TruckWhereUniqueInput
    update?: XOR<XOR<TruckUpdateToOneWithWhereWithoutTruckPriceInput, TruckUpdateWithoutTruckPriceInput>, TruckUncheckedUpdateWithoutTruckPriceInput>
  }

  export type UserUpdateOneRequiredWithoutTruckPriceNestedInput = {
    create?: XOR<UserCreateWithoutTruckPriceInput, UserUncheckedCreateWithoutTruckPriceInput>
    connectOrCreate?: UserCreateOrConnectWithoutTruckPriceInput
    upsert?: UserUpsertWithoutTruckPriceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTruckPriceInput, UserUpdateWithoutTruckPriceInput>, UserUncheckedUpdateWithoutTruckPriceInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LoadCreateWithoutLoadOwnerInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    truckPrices?: TruckPriceCreateNestedManyWithoutLoadInput
    truck?: TruckCreateNestedOneWithoutLoadsInput
  }

  export type LoadUncheckedCreateWithoutLoadOwnerInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    isBooked?: boolean
    truckId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    truckPrices?: TruckPriceUncheckedCreateNestedManyWithoutLoadInput
  }

  export type LoadCreateOrConnectWithoutLoadOwnerInput = {
    where: LoadWhereUniqueInput
    create: XOR<LoadCreateWithoutLoadOwnerInput, LoadUncheckedCreateWithoutLoadOwnerInput>
  }

  export type LoadCreateManyLoadOwnerInputEnvelope = {
    data: LoadCreateManyLoadOwnerInput | LoadCreateManyLoadOwnerInput[]
  }

  export type TruckCreateWithoutTruckOwnerInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
    loads?: LoadCreateNestedManyWithoutTruckInput
    truckPrice?: TruckPriceCreateNestedManyWithoutTruckInput
  }

  export type TruckUncheckedCreateWithoutTruckOwnerInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
    loads?: LoadUncheckedCreateNestedManyWithoutTruckInput
    truckPrice?: TruckPriceUncheckedCreateNestedManyWithoutTruckInput
  }

  export type TruckCreateOrConnectWithoutTruckOwnerInput = {
    where: TruckWhereUniqueInput
    create: XOR<TruckCreateWithoutTruckOwnerInput, TruckUncheckedCreateWithoutTruckOwnerInput>
  }

  export type TruckCreateManyTruckOwnerInputEnvelope = {
    data: TruckCreateManyTruckOwnerInput | TruckCreateManyTruckOwnerInput[]
  }

  export type TruckPriceCreateWithoutTruckPriceOwnerInput = {
    id?: string
    quotedPrice: number
    load: LoadCreateNestedOneWithoutTruckPricesInput
    truck: TruckCreateNestedOneWithoutTruckPriceInput
  }

  export type TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput = {
    id?: string
    loadId: string
    truckId: string
    quotedPrice: number
  }

  export type TruckPriceCreateOrConnectWithoutTruckPriceOwnerInput = {
    where: TruckPriceWhereUniqueInput
    create: XOR<TruckPriceCreateWithoutTruckPriceOwnerInput, TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput>
  }

  export type TruckPriceCreateManyTruckPriceOwnerInputEnvelope = {
    data: TruckPriceCreateManyTruckPriceOwnerInput | TruckPriceCreateManyTruckPriceOwnerInput[]
  }

  export type LoadUpsertWithWhereUniqueWithoutLoadOwnerInput = {
    where: LoadWhereUniqueInput
    update: XOR<LoadUpdateWithoutLoadOwnerInput, LoadUncheckedUpdateWithoutLoadOwnerInput>
    create: XOR<LoadCreateWithoutLoadOwnerInput, LoadUncheckedCreateWithoutLoadOwnerInput>
  }

  export type LoadUpdateWithWhereUniqueWithoutLoadOwnerInput = {
    where: LoadWhereUniqueInput
    data: XOR<LoadUpdateWithoutLoadOwnerInput, LoadUncheckedUpdateWithoutLoadOwnerInput>
  }

  export type LoadUpdateManyWithWhereWithoutLoadOwnerInput = {
    where: LoadScalarWhereInput
    data: XOR<LoadUpdateManyMutationInput, LoadUncheckedUpdateManyWithoutLoadOwnerInput>
  }

  export type LoadScalarWhereInput = {
    AND?: LoadScalarWhereInput | LoadScalarWhereInput[]
    OR?: LoadScalarWhereInput[]
    NOT?: LoadScalarWhereInput | LoadScalarWhereInput[]
    id?: StringFilter<"Load"> | string
    title?: StringFilter<"Load"> | string
    description?: StringFilter<"Load"> | string
    price?: IntFilter<"Load"> | number
    fromAddress?: StringFilter<"Load"> | string
    toAddress?: StringFilter<"Load"> | string
    image?: StringFilter<"Load"> | string
    userEmail?: StringFilter<"Load"> | string
    isBooked?: BoolFilter<"Load"> | boolean
    truckId?: StringNullableFilter<"Load"> | string | null
    createdAt?: DateTimeFilter<"Load"> | Date | string
    updatedAt?: DateTimeFilter<"Load"> | Date | string
  }

  export type TruckUpsertWithWhereUniqueWithoutTruckOwnerInput = {
    where: TruckWhereUniqueInput
    update: XOR<TruckUpdateWithoutTruckOwnerInput, TruckUncheckedUpdateWithoutTruckOwnerInput>
    create: XOR<TruckCreateWithoutTruckOwnerInput, TruckUncheckedCreateWithoutTruckOwnerInput>
  }

  export type TruckUpdateWithWhereUniqueWithoutTruckOwnerInput = {
    where: TruckWhereUniqueInput
    data: XOR<TruckUpdateWithoutTruckOwnerInput, TruckUncheckedUpdateWithoutTruckOwnerInput>
  }

  export type TruckUpdateManyWithWhereWithoutTruckOwnerInput = {
    where: TruckScalarWhereInput
    data: XOR<TruckUpdateManyMutationInput, TruckUncheckedUpdateManyWithoutTruckOwnerInput>
  }

  export type TruckScalarWhereInput = {
    AND?: TruckScalarWhereInput | TruckScalarWhereInput[]
    OR?: TruckScalarWhereInput[]
    NOT?: TruckScalarWhereInput | TruckScalarWhereInput[]
    id?: StringFilter<"Truck"> | string
    driverName?: StringFilter<"Truck"> | string
    truckEmail?: StringFilter<"Truck"> | string
    license?: StringFilter<"Truck"> | string
    truckCapacity?: IntFilter<"Truck"> | number
    favLoads?: StringNullableListFilter<"Truck">
    bookedLoads?: JsonNullableListFilter<"Truck">
  }

  export type TruckPriceUpsertWithWhereUniqueWithoutTruckPriceOwnerInput = {
    where: TruckPriceWhereUniqueInput
    update: XOR<TruckPriceUpdateWithoutTruckPriceOwnerInput, TruckPriceUncheckedUpdateWithoutTruckPriceOwnerInput>
    create: XOR<TruckPriceCreateWithoutTruckPriceOwnerInput, TruckPriceUncheckedCreateWithoutTruckPriceOwnerInput>
  }

  export type TruckPriceUpdateWithWhereUniqueWithoutTruckPriceOwnerInput = {
    where: TruckPriceWhereUniqueInput
    data: XOR<TruckPriceUpdateWithoutTruckPriceOwnerInput, TruckPriceUncheckedUpdateWithoutTruckPriceOwnerInput>
  }

  export type TruckPriceUpdateManyWithWhereWithoutTruckPriceOwnerInput = {
    where: TruckPriceScalarWhereInput
    data: XOR<TruckPriceUpdateManyMutationInput, TruckPriceUncheckedUpdateManyWithoutTruckPriceOwnerInput>
  }

  export type TruckPriceScalarWhereInput = {
    AND?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
    OR?: TruckPriceScalarWhereInput[]
    NOT?: TruckPriceScalarWhereInput | TruckPriceScalarWhereInput[]
    id?: StringFilter<"TruckPrice"> | string
    loadId?: StringFilter<"TruckPrice"> | string
    truckId?: StringFilter<"TruckPrice"> | string
    truckPriceEmail?: StringFilter<"TruckPrice"> | string
    quotedPrice?: IntFilter<"TruckPrice"> | number
  }

  export type UserCreateWithoutOwnedLoadsInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedTrucks?: TruckCreateNestedManyWithoutTruckOwnerInput
    truckPrice?: TruckPriceCreateNestedManyWithoutTruckPriceOwnerInput
  }

  export type UserUncheckedCreateWithoutOwnedLoadsInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedTrucks?: TruckUncheckedCreateNestedManyWithoutTruckOwnerInput
    truckPrice?: TruckPriceUncheckedCreateNestedManyWithoutTruckPriceOwnerInput
  }

  export type UserCreateOrConnectWithoutOwnedLoadsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedLoadsInput, UserUncheckedCreateWithoutOwnedLoadsInput>
  }

  export type TruckPriceCreateWithoutLoadInput = {
    id?: string
    quotedPrice: number
    truck: TruckCreateNestedOneWithoutTruckPriceInput
    truckPriceOwner: UserCreateNestedOneWithoutTruckPriceInput
  }

  export type TruckPriceUncheckedCreateWithoutLoadInput = {
    id?: string
    truckId: string
    truckPriceEmail: string
    quotedPrice: number
  }

  export type TruckPriceCreateOrConnectWithoutLoadInput = {
    where: TruckPriceWhereUniqueInput
    create: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput>
  }

  export type TruckPriceCreateManyLoadInputEnvelope = {
    data: TruckPriceCreateManyLoadInput | TruckPriceCreateManyLoadInput[]
  }

  export type TruckCreateWithoutLoadsInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
    truckOwner: UserCreateNestedOneWithoutOwnedTrucksInput
    truckPrice?: TruckPriceCreateNestedManyWithoutTruckInput
  }

  export type TruckUncheckedCreateWithoutLoadsInput = {
    id?: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
    truckPrice?: TruckPriceUncheckedCreateNestedManyWithoutTruckInput
  }

  export type TruckCreateOrConnectWithoutLoadsInput = {
    where: TruckWhereUniqueInput
    create: XOR<TruckCreateWithoutLoadsInput, TruckUncheckedCreateWithoutLoadsInput>
  }

  export type UserUpsertWithoutOwnedLoadsInput = {
    update: XOR<UserUpdateWithoutOwnedLoadsInput, UserUncheckedUpdateWithoutOwnedLoadsInput>
    create: XOR<UserCreateWithoutOwnedLoadsInput, UserUncheckedCreateWithoutOwnedLoadsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedLoadsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedLoadsInput, UserUncheckedUpdateWithoutOwnedLoadsInput>
  }

  export type UserUpdateWithoutOwnedLoadsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedTrucks?: TruckUpdateManyWithoutTruckOwnerNestedInput
    truckPrice?: TruckPriceUpdateManyWithoutTruckPriceOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedLoadsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedTrucks?: TruckUncheckedUpdateManyWithoutTruckOwnerNestedInput
    truckPrice?: TruckPriceUncheckedUpdateManyWithoutTruckPriceOwnerNestedInput
  }

  export type TruckPriceUpsertWithWhereUniqueWithoutLoadInput = {
    where: TruckPriceWhereUniqueInput
    update: XOR<TruckPriceUpdateWithoutLoadInput, TruckPriceUncheckedUpdateWithoutLoadInput>
    create: XOR<TruckPriceCreateWithoutLoadInput, TruckPriceUncheckedCreateWithoutLoadInput>
  }

  export type TruckPriceUpdateWithWhereUniqueWithoutLoadInput = {
    where: TruckPriceWhereUniqueInput
    data: XOR<TruckPriceUpdateWithoutLoadInput, TruckPriceUncheckedUpdateWithoutLoadInput>
  }

  export type TruckPriceUpdateManyWithWhereWithoutLoadInput = {
    where: TruckPriceScalarWhereInput
    data: XOR<TruckPriceUpdateManyMutationInput, TruckPriceUncheckedUpdateManyWithoutLoadInput>
  }

  export type TruckUpsertWithoutLoadsInput = {
    update: XOR<TruckUpdateWithoutLoadsInput, TruckUncheckedUpdateWithoutLoadsInput>
    create: XOR<TruckCreateWithoutLoadsInput, TruckUncheckedCreateWithoutLoadsInput>
    where?: TruckWhereInput
  }

  export type TruckUpdateToOneWithWhereWithoutLoadsInput = {
    where?: TruckWhereInput
    data: XOR<TruckUpdateWithoutLoadsInput, TruckUncheckedUpdateWithoutLoadsInput>
  }

  export type TruckUpdateWithoutLoadsInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
    truckOwner?: UserUpdateOneRequiredWithoutOwnedTrucksNestedInput
    truckPrice?: TruckPriceUpdateManyWithoutTruckNestedInput
  }

  export type TruckUncheckedUpdateWithoutLoadsInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    truckEmail?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
    truckPrice?: TruckPriceUncheckedUpdateManyWithoutTruckNestedInput
  }

  export type UserCreateWithoutOwnedTrucksInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadCreateNestedManyWithoutLoadOwnerInput
    truckPrice?: TruckPriceCreateNestedManyWithoutTruckPriceOwnerInput
  }

  export type UserUncheckedCreateWithoutOwnedTrucksInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadUncheckedCreateNestedManyWithoutLoadOwnerInput
    truckPrice?: TruckPriceUncheckedCreateNestedManyWithoutTruckPriceOwnerInput
  }

  export type UserCreateOrConnectWithoutOwnedTrucksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedTrucksInput, UserUncheckedCreateWithoutOwnedTrucksInput>
  }

  export type LoadCreateWithoutTruckInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    loadOwner: UserCreateNestedOneWithoutOwnedLoadsInput
    truckPrices?: TruckPriceCreateNestedManyWithoutLoadInput
  }

  export type LoadUncheckedCreateWithoutTruckInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    truckPrices?: TruckPriceUncheckedCreateNestedManyWithoutLoadInput
  }

  export type LoadCreateOrConnectWithoutTruckInput = {
    where: LoadWhereUniqueInput
    create: XOR<LoadCreateWithoutTruckInput, LoadUncheckedCreateWithoutTruckInput>
  }

  export type LoadCreateManyTruckInputEnvelope = {
    data: LoadCreateManyTruckInput | LoadCreateManyTruckInput[]
  }

  export type TruckPriceCreateWithoutTruckInput = {
    id?: string
    quotedPrice: number
    load: LoadCreateNestedOneWithoutTruckPricesInput
    truckPriceOwner: UserCreateNestedOneWithoutTruckPriceInput
  }

  export type TruckPriceUncheckedCreateWithoutTruckInput = {
    id?: string
    loadId: string
    truckPriceEmail: string
    quotedPrice: number
  }

  export type TruckPriceCreateOrConnectWithoutTruckInput = {
    where: TruckPriceWhereUniqueInput
    create: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput>
  }

  export type TruckPriceCreateManyTruckInputEnvelope = {
    data: TruckPriceCreateManyTruckInput | TruckPriceCreateManyTruckInput[]
  }

  export type UserUpsertWithoutOwnedTrucksInput = {
    update: XOR<UserUpdateWithoutOwnedTrucksInput, UserUncheckedUpdateWithoutOwnedTrucksInput>
    create: XOR<UserCreateWithoutOwnedTrucksInput, UserUncheckedCreateWithoutOwnedTrucksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedTrucksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedTrucksInput, UserUncheckedUpdateWithoutOwnedTrucksInput>
  }

  export type UserUpdateWithoutOwnedTrucksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadUpdateManyWithoutLoadOwnerNestedInput
    truckPrice?: TruckPriceUpdateManyWithoutTruckPriceOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedTrucksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadUncheckedUpdateManyWithoutLoadOwnerNestedInput
    truckPrice?: TruckPriceUncheckedUpdateManyWithoutTruckPriceOwnerNestedInput
  }

  export type LoadUpsertWithWhereUniqueWithoutTruckInput = {
    where: LoadWhereUniqueInput
    update: XOR<LoadUpdateWithoutTruckInput, LoadUncheckedUpdateWithoutTruckInput>
    create: XOR<LoadCreateWithoutTruckInput, LoadUncheckedCreateWithoutTruckInput>
  }

  export type LoadUpdateWithWhereUniqueWithoutTruckInput = {
    where: LoadWhereUniqueInput
    data: XOR<LoadUpdateWithoutTruckInput, LoadUncheckedUpdateWithoutTruckInput>
  }

  export type LoadUpdateManyWithWhereWithoutTruckInput = {
    where: LoadScalarWhereInput
    data: XOR<LoadUpdateManyMutationInput, LoadUncheckedUpdateManyWithoutTruckInput>
  }

  export type TruckPriceUpsertWithWhereUniqueWithoutTruckInput = {
    where: TruckPriceWhereUniqueInput
    update: XOR<TruckPriceUpdateWithoutTruckInput, TruckPriceUncheckedUpdateWithoutTruckInput>
    create: XOR<TruckPriceCreateWithoutTruckInput, TruckPriceUncheckedCreateWithoutTruckInput>
  }

  export type TruckPriceUpdateWithWhereUniqueWithoutTruckInput = {
    where: TruckPriceWhereUniqueInput
    data: XOR<TruckPriceUpdateWithoutTruckInput, TruckPriceUncheckedUpdateWithoutTruckInput>
  }

  export type TruckPriceUpdateManyWithWhereWithoutTruckInput = {
    where: TruckPriceScalarWhereInput
    data: XOR<TruckPriceUpdateManyMutationInput, TruckPriceUncheckedUpdateManyWithoutTruckInput>
  }

  export type LoadCreateWithoutTruckPricesInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    loadOwner: UserCreateNestedOneWithoutOwnedLoadsInput
    truck?: TruckCreateNestedOneWithoutLoadsInput
  }

  export type LoadUncheckedCreateWithoutTruckPricesInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    isBooked?: boolean
    truckId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoadCreateOrConnectWithoutTruckPricesInput = {
    where: LoadWhereUniqueInput
    create: XOR<LoadCreateWithoutTruckPricesInput, LoadUncheckedCreateWithoutTruckPricesInput>
  }

  export type TruckCreateWithoutTruckPriceInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
    truckOwner: UserCreateNestedOneWithoutOwnedTrucksInput
    loads?: LoadCreateNestedManyWithoutTruckInput
  }

  export type TruckUncheckedCreateWithoutTruckPriceInput = {
    id?: string
    driverName: string
    truckEmail: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
    loads?: LoadUncheckedCreateNestedManyWithoutTruckInput
  }

  export type TruckCreateOrConnectWithoutTruckPriceInput = {
    where: TruckWhereUniqueInput
    create: XOR<TruckCreateWithoutTruckPriceInput, TruckUncheckedCreateWithoutTruckPriceInput>
  }

  export type UserCreateWithoutTruckPriceInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadCreateNestedManyWithoutLoadOwnerInput
    ownedTrucks?: TruckCreateNestedManyWithoutTruckOwnerInput
  }

  export type UserUncheckedCreateWithoutTruckPriceInput = {
    id?: string
    name?: string | null
    email: string
    image?: string | null
    ownedLoads?: LoadUncheckedCreateNestedManyWithoutLoadOwnerInput
    ownedTrucks?: TruckUncheckedCreateNestedManyWithoutTruckOwnerInput
  }

  export type UserCreateOrConnectWithoutTruckPriceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTruckPriceInput, UserUncheckedCreateWithoutTruckPriceInput>
  }

  export type LoadUpsertWithoutTruckPricesInput = {
    update: XOR<LoadUpdateWithoutTruckPricesInput, LoadUncheckedUpdateWithoutTruckPricesInput>
    create: XOR<LoadCreateWithoutTruckPricesInput, LoadUncheckedCreateWithoutTruckPricesInput>
    where?: LoadWhereInput
  }

  export type LoadUpdateToOneWithWhereWithoutTruckPricesInput = {
    where?: LoadWhereInput
    data: XOR<LoadUpdateWithoutTruckPricesInput, LoadUncheckedUpdateWithoutTruckPricesInput>
  }

  export type LoadUpdateWithoutTruckPricesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loadOwner?: UserUpdateOneRequiredWithoutOwnedLoadsNestedInput
    truck?: TruckUpdateOneWithoutLoadsNestedInput
  }

  export type LoadUncheckedUpdateWithoutTruckPricesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckUpsertWithoutTruckPriceInput = {
    update: XOR<TruckUpdateWithoutTruckPriceInput, TruckUncheckedUpdateWithoutTruckPriceInput>
    create: XOR<TruckCreateWithoutTruckPriceInput, TruckUncheckedCreateWithoutTruckPriceInput>
    where?: TruckWhereInput
  }

  export type TruckUpdateToOneWithWhereWithoutTruckPriceInput = {
    where?: TruckWhereInput
    data: XOR<TruckUpdateWithoutTruckPriceInput, TruckUncheckedUpdateWithoutTruckPriceInput>
  }

  export type TruckUpdateWithoutTruckPriceInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
    truckOwner?: UserUpdateOneRequiredWithoutOwnedTrucksNestedInput
    loads?: LoadUpdateManyWithoutTruckNestedInput
  }

  export type TruckUncheckedUpdateWithoutTruckPriceInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    truckEmail?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
    loads?: LoadUncheckedUpdateManyWithoutTruckNestedInput
  }

  export type UserUpsertWithoutTruckPriceInput = {
    update: XOR<UserUpdateWithoutTruckPriceInput, UserUncheckedUpdateWithoutTruckPriceInput>
    create: XOR<UserCreateWithoutTruckPriceInput, UserUncheckedCreateWithoutTruckPriceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTruckPriceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTruckPriceInput, UserUncheckedUpdateWithoutTruckPriceInput>
  }

  export type UserUpdateWithoutTruckPriceInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadUpdateManyWithoutLoadOwnerNestedInput
    ownedTrucks?: TruckUpdateManyWithoutTruckOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutTruckPriceInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ownedLoads?: LoadUncheckedUpdateManyWithoutLoadOwnerNestedInput
    ownedTrucks?: TruckUncheckedUpdateManyWithoutTruckOwnerNestedInput
  }

  export type LoadCreateManyLoadOwnerInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    isBooked?: boolean
    truckId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TruckCreateManyTruckOwnerInput = {
    id?: string
    driverName: string
    license: string
    truckCapacity: number
    favLoads?: TruckCreatefavLoadsInput | string[]
    bookedLoads?: TruckCreatebookedLoadsInput | InputJsonValue[]
  }

  export type TruckPriceCreateManyTruckPriceOwnerInput = {
    id?: string
    loadId: string
    truckId: string
    quotedPrice: number
  }

  export type LoadUpdateWithoutLoadOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckPrices?: TruckPriceUpdateManyWithoutLoadNestedInput
    truck?: TruckUpdateOneWithoutLoadsNestedInput
  }

  export type LoadUncheckedUpdateWithoutLoadOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckPrices?: TruckPriceUncheckedUpdateManyWithoutLoadNestedInput
  }

  export type LoadUncheckedUpdateManyWithoutLoadOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckUpdateWithoutTruckOwnerInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
    loads?: LoadUpdateManyWithoutTruckNestedInput
    truckPrice?: TruckPriceUpdateManyWithoutTruckNestedInput
  }

  export type TruckUncheckedUpdateWithoutTruckOwnerInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
    loads?: LoadUncheckedUpdateManyWithoutTruckNestedInput
    truckPrice?: TruckPriceUncheckedUpdateManyWithoutTruckNestedInput
  }

  export type TruckUncheckedUpdateManyWithoutTruckOwnerInput = {
    driverName?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    truckCapacity?: IntFieldUpdateOperationsInput | number
    favLoads?: TruckUpdatefavLoadsInput | string[]
    bookedLoads?: TruckUpdatebookedLoadsInput | InputJsonValue[]
  }

  export type TruckPriceUpdateWithoutTruckPriceOwnerInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
    load?: LoadUpdateOneRequiredWithoutTruckPricesNestedInput
    truck?: TruckUpdateOneRequiredWithoutTruckPriceNestedInput
  }

  export type TruckPriceUncheckedUpdateWithoutTruckPriceOwnerInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceUncheckedUpdateManyWithoutTruckPriceOwnerInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceCreateManyLoadInput = {
    id?: string
    truckId: string
    truckPriceEmail: string
    quotedPrice: number
  }

  export type TruckPriceUpdateWithoutLoadInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
    truck?: TruckUpdateOneRequiredWithoutTruckPriceNestedInput
    truckPriceOwner?: UserUpdateOneRequiredWithoutTruckPriceNestedInput
  }

  export type TruckPriceUncheckedUpdateWithoutLoadInput = {
    truckId?: StringFieldUpdateOperationsInput | string
    truckPriceEmail?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceUncheckedUpdateManyWithoutLoadInput = {
    truckId?: StringFieldUpdateOperationsInput | string
    truckPriceEmail?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type LoadCreateManyTruckInput = {
    id?: string
    title: string
    description: string
    price: number
    fromAddress: string
    toAddress: string
    image: string
    userEmail: string
    isBooked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TruckPriceCreateManyTruckInput = {
    id?: string
    loadId: string
    truckPriceEmail: string
    quotedPrice: number
  }

  export type LoadUpdateWithoutTruckInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loadOwner?: UserUpdateOneRequiredWithoutOwnedLoadsNestedInput
    truckPrices?: TruckPriceUpdateManyWithoutLoadNestedInput
  }

  export type LoadUncheckedUpdateWithoutTruckInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    truckPrices?: TruckPriceUncheckedUpdateManyWithoutLoadNestedInput
  }

  export type LoadUncheckedUpdateManyWithoutTruckInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    isBooked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckPriceUpdateWithoutTruckInput = {
    quotedPrice?: IntFieldUpdateOperationsInput | number
    load?: LoadUpdateOneRequiredWithoutTruckPricesNestedInput
    truckPriceOwner?: UserUpdateOneRequiredWithoutTruckPriceNestedInput
  }

  export type TruckPriceUncheckedUpdateWithoutTruckInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    truckPriceEmail?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }

  export type TruckPriceUncheckedUpdateManyWithoutTruckInput = {
    loadId?: StringFieldUpdateOperationsInput | string
    truckPriceEmail?: StringFieldUpdateOperationsInput | string
    quotedPrice?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoadCountOutputTypeDefaultArgs instead
     */
    export type LoadCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoadCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TruckCountOutputTypeDefaultArgs instead
     */
    export type TruckCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TruckCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoadDefaultArgs instead
     */
    export type LoadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TruckDefaultArgs instead
     */
    export type TruckArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TruckDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TruckPriceDefaultArgs instead
     */
    export type TruckPriceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TruckPriceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}